// src/api/cartApi.js
import axios from 'axios';
import authService from '../services/authService';

const API_URL = 'http://localhost:5000/api';

// T·∫°o axios instance v·ªõi interceptor ƒë·ªÉ th√™m token
const cartApi = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor ƒë·ªÉ th√™m token v√†o m·ªói request
cartApi.interceptors.request.use(
  (config) => {
    const token = authService.getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

/**
 * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
 * @param {number} sanPhamId - ID s·∫£n ph·∫©m
 * @param {number} soLuong - S·ªë l∆∞·ª£ng (m·∫∑c ƒë·ªãnh 1)
 * @returns {Promise} Response t·ª´ API
 */
export const addToCart = async (sanPhamId, soLuong = 1) => {
  try {
    console.log(`üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng - ID: ${sanPhamId}, SL: ${soLuong}`);
    
    const response = await cartApi.post('/cart/add', {
      sanPhamId,
      soLuong,
    });

    console.log('‚úÖ Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:', error);
    
    // X·ª≠ l√Ω l·ªói chi ti·∫øt
    if (error.response) {
      const { status, data } = error.response;
      
      switch (status) {
        case 400:
          throw new Error(data.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        case 401:
          throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng gi·ªè h√†ng');
        case 404:
          throw new Error(data.message || 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ng·ª´ng kinh doanh');
        case 500:
          throw new Error('L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau');
        default:
          throw new Error(data.message || `L·ªói ${status}`);
      }
    } else if (error.request) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
    } else {
      throw new Error(error.message || 'C√≥ l·ªói x·∫£y ra');
    }
  }
};

/**
 * L·∫•y th√¥ng tin gi·ªè h√†ng
 * @returns {Promise} Danh s√°ch s·∫£n ph·∫©m trong gi·ªè
 */
export const getCart = async () => {
  try {
    console.log('üì¶ L·∫•y th√¥ng tin gi·ªè h√†ng...');
    
    const response = await cartApi.get('/cart');
    
    console.log('‚úÖ L·∫•y gi·ªè h√†ng th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y gi·ªè h√†ng:', error);
    
    if (error.response) {
      throw new Error(error.response.data.message || 'L·ªói l·∫•y gi·ªè h√†ng');
    }
    throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
  }
};

/**
 * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
 * @param {number} sanPhamId - ID s·∫£n ph·∫©m
 * @param {number} soLuong - S·ªë l∆∞·ª£ng m·ªõi
 * @returns {Promise} S·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
 */
export const updateCartItem = async (sanPhamId, soLuong) => {
  try {
    console.log(`üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng - ID: ${sanPhamId}, SL: ${soLuong}`);
    
    const response = await cartApi.put('/cart/update', {
      sanPhamId,
      soLuong,
    });

    console.log('‚úÖ C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng:', error);
    
    if (error.response) {
      throw new Error(error.response.data.message || 'L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng');
    }
    throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
  }
};

/**
 * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
 * @param {number} productId - ID s·∫£n ph·∫©m
 * @returns {Promise} K·∫øt qu·∫£ x√≥a
 */
export const removeFromCart = async (productId) => {
  try {
    console.log(`üóëÔ∏è X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè - ID: ${productId}`);
    
    const response = await cartApi.delete(`/cart/remove/${productId}`);

    console.log('‚úÖ X√≥a kh·ªèi gi·ªè h√†ng th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a kh·ªèi gi·ªè h√†ng:', error);
    
    if (error.response) {
      throw new Error(error.response.data.message || 'L·ªói x√≥a s·∫£n ph·∫©m');
    }
    throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
  }
};

/**
 * X√≥a to√†n b·ªô gi·ªè h√†ng
 * @returns {Promise} K·∫øt qu·∫£ x√≥a
 */
export const clearCart = async () => {
  try {
    console.log('üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng...');
    
    const response = await cartApi.delete('/cart/clear');

    console.log('‚úÖ X√≥a gi·ªè h√†ng th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a gi·ªè h√†ng:', error);
    
    if (error.response) {
      throw new Error(error.response.data.message || 'L·ªói x√≥a gi·ªè h√†ng');
    }
    throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
  }
};
