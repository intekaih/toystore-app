import React, { useState } from 'react';
import { useCartDecorator } from '../decorators/useCartDecorator';
import './CartDecoratorDemo.css';

/**
 * üéÆ DEMO COMPONENT - Cart Decorator Pattern
 * 
 * Component demo s·ª≠ d·ª•ng Decorator Pattern ƒë·ªÉ t√≠nh gi√° gi·ªè h√†ng
 */
const CartDecoratorDemo = () => {
  // D·ªØ li·ªáu gi·∫£ l·∫≠p t·ª´ API
  const [cartItems] = useState([
    {
      MaSP: 1,
      TenSP: 'B√∫p b√™ Barbie Dream House',
      Gia: 500000,
      SoLuong: 2,
      HinhAnh: '/images/barbie.jpg'
    },
    {
      MaSP: 2,
      TenSP: 'Lego Star Wars Millennium Falcon',
      Gia: 800000,
      SoLuong: 1,
      HinhAnh: '/images/lego.jpg'
    },
    {
      MaSP: 3,
      TenSP: 'Robot bi·∫øn h√¨nh Transformers',
      Gia: 350000,
      SoLuong: 1,
      HinhAnh: '/images/robot.jpg'
    }
  ]);

  // State cho voucher
  const [voucherCode, setVoucherCode] = useState('');
  const [appliedVoucher, setAppliedVoucher] = useState(null);

  // Danh s√°ch voucher c√≥ s·∫µn (gi·∫£ l·∫≠p)
  const availableVouchers = {
    'SALE50K': { code: 'SALE50K', discount: 50000 },
    'MEGA100K': { code: 'MEGA100K', discount: 100000 },
    'DISCOUNT30K': { code: 'DISCOUNT30K', discount: 30000 }
  };

  // √Åp d·ª•ng Decorator Pattern
  const cart = useCartDecorator(cartItems, {
    applyVAT: true,
    vatRate: 0.1,
    voucher: appliedVoucher,
    enableFreeShipping: true,
    shippingFee: 30000,
    minOrderForFreeShip: 500000
  });

  // X·ª≠ l√Ω apply voucher
  const handleApplyVoucher = () => {
    const voucher = availableVouchers[voucherCode.toUpperCase()];
    if (voucher) {
      setAppliedVoucher(voucher);
      alert(`‚úÖ √Åp d·ª•ng voucher ${voucher.code} th√†nh c√¥ng! Gi·∫£m ${cart.formatPrice(voucher.discount)}`);
    } else {
      alert('‚ùå M√£ voucher kh√¥ng h·ª£p l·ªá!');
    }
  };

  // X√≥a voucher
  const handleRemoveVoucher = () => {
    setAppliedVoucher(null);
    setVoucherCode('');
  };

  return (
    <div className="cart-decorator-demo">
      <h1>üé® Decorator Pattern - Demo Gi·ªè H√†ng</h1>

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      <div className="cart-items">
        <h2>üõí S·∫£n ph·∫©m trong gi·ªè ({cartItems.length})</h2>
        {cart.items.map((item) => (
          <div key={item.id} className="cart-item">
            <div className="item-info">
              <h3>{item.name}</h3>
              <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
              <p>ƒê∆°n gi√°: {cart.formatPrice(item.basePrice)}</p>
            </div>
            <div className="item-price">
              <strong>{cart.formatPrice(item.finalPrice)}</strong>
            </div>
          </div>
        ))}
      </div>

      {/* Voucher Section */}
      <div className="voucher-section">
        <h3>üé´ M√£ gi·∫£m gi√°</h3>
        {!appliedVoucher ? (
          <div className="voucher-input">
            <input
              type="text"
              placeholder="Nh·∫≠p m√£ voucher..."
              value={voucherCode}
              onChange={(e) => setVoucherCode(e.target.value)}
            />
            <button onClick={handleApplyVoucher}>√Åp d·ª•ng</button>
          </div>
        ) : (
          <div className="voucher-applied">
            <span>‚úÖ {appliedVoucher.code} (-{cart.formatPrice(appliedVoucher.discount)})</span>
            <button onClick={handleRemoveVoucher}>X√≥a</button>
          </div>
        )}
        <div className="voucher-hints">
          <small>M√£ kh·∫£ d·ª•ng: SALE50K, MEGA100K, DISCOUNT30K</small>
        </div>
      </div>

      {/* Free Shipping Info */}
      {cart.freeShippingInfo && (
        <div className={`free-shipping-banner ${cart.freeShippingInfo.isEligible ? 'eligible' : ''}`}>
          {cart.freeShippingInfo.isEligible ? (
            <>
              <span className="icon">üéâ</span>
              <span>B·∫°n ƒë∆∞·ª£c mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn! Ti·∫øt ki·ªám {cart.formatPrice(cart.freeShippingInfo.savedAmount)}</span>
            </>
          ) : (
            <>
              <span className="icon">üöö</span>
              <span>Mua th√™m {cart.formatPrice(cart.freeShippingInfo.remaining)} ƒë·ªÉ ƒë∆∞·ª£c mi·ªÖn ph√≠ ship!</span>
            </>
          )}
        </div>
      )}

      {/* Price Breakdown - Chi ti·∫øt gi√° */}
      <div className="price-breakdown">
        <h3>üí∞ Chi ti·∫øt thanh to√°n</h3>
        {cart.priceBreakdown.map((item, index) => (
          <div key={index} className={`breakdown-item ${item.isAddition ? 'addition' : 'subtraction'}`}>
            <span>{item.label}</span>
            <span className={item.isAddition ? 'amount-add' : 'amount-subtract'}>
              {item.isAddition ? '+' : '-'} {cart.formatPrice(item.amount)}
            </span>
          </div>
        ))}

        <div className="breakdown-total">
          <strong>T·ªïng c·ªông:</strong>
          <strong className="total-amount">{cart.formatPrice(cart.total)}</strong>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="summary-cards">
        <div className="summary-card">
          <div className="card-label">T·∫°m t√≠nh</div>
          <div className="card-value">{cart.formatPrice(cart.subtotal)}</div>
        </div>
        <div className="summary-card vat">
          <div className="card-label">VAT (10%)</div>
          <div className="card-value">+{cart.formatPrice(cart.vat)}</div>
        </div>
        <div className="summary-card discount">
          <div className="card-label">Gi·∫£m gi√°</div>
          <div className="card-value">-{cart.formatPrice(cart.discount)}</div>
        </div>
        <div className="summary-card shipping">
          <div className="card-label">V·∫≠n chuy·ªÉn</div>
          <div className="card-value">
            {cart.shipping === 0 ? 'Mi·ªÖn ph√≠' : cart.formatPrice(cart.shipping)}
          </div>
        </div>
      </div>

      {/* Checkout Button */}
      <div className="checkout-section">
        <button className="checkout-btn">
          Thanh to√°n {cart.formatPrice(cart.total)}
        </button>
      </div>

      {/* Debug Info (ch·ªâ ƒë·ªÉ demo) */}
      <details className="debug-info">
        <summary>üîç Debug Info (Decorator Pattern)</summary>
        <pre>{JSON.stringify(cart, null, 2)}</pre>
      </details>
    </div>
  );
};

export default CartDecoratorDemo;
