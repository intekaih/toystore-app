/**
 * üìù NewestStrategy - S·∫Øp x·∫øp s·∫£n ph·∫©m theo ng√†y th√™m m·ªõi nh·∫•t
 * 
 * Strategy n√†y s·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo th·ª© t·ª± th·ªùi gian th√™m v√†o,
 * s·∫£n ph·∫©m m·ªõi nh·∫•t s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã tr∆∞·ªõc.
 * 
 * üéØ Use case: Trang "H√†ng m·ªõi v·ªÅ", "S·∫£n ph·∫©m m·ªõi nh·∫•t"
 */

const ProductFilterStrategy = require('./ProductFilterStrategy');

class NewestStrategy extends ProductFilterStrategy {
  /**
   * L·ªçc v√† s·∫Øp x·∫øp s·∫£n ph·∫©m theo ng√†y th√™m m·ªõi nh·∫•t
   * 
   * @param {Array} products - Danh s√°ch s·∫£n ph·∫©m g·ªëc
   * @param {Object} query - Tham s·ªë query (minPrice, maxPrice, categoryId)
   * @returns {Array} - S·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t
   */
  filter(products, query = {}) {
    // B∆∞·ªõc 1: √Åp d·ª•ng c√°c filter c∆° b·∫£n (gi√°, danh m·ª•c) n·∫øu c√≥
    let filtered = [...products]; // Clone array ƒë·ªÉ tr√°nh mutate original

    // L·ªçc theo kho·∫£ng gi√°
    filtered = this.filterByPriceRange(
      filtered, 
      query.minPrice, 
      query.maxPrice
    );

    // L·ªçc theo danh m·ª•c
    filtered = this.filterByCategory(filtered, query.categoryId);

    // B∆∞·ªõc 2: S·∫Øp x·∫øp theo ng√†y th√™m (NgayTao) - m·ªõi nh·∫•t tr∆∞·ªõc
    filtered.sort((a, b) => {
      // N·∫øu c√≥ tr∆∞·ªùng NgayTao trong database
      if (a.NgayTao && b.NgayTao) {
        return new Date(b.NgayTao) - new Date(a.NgayTao);
      }
      // Fallback: s·∫Øp x·∫øp theo ID (gi·∫£ ƒë·ªãnh ID tƒÉng d·∫ßn theo th·ªùi gian)
      return b.ID - a.ID;
    });

    return filtered;
  }
}

module.exports = NewestStrategy;
