/**
 * üìù BestSellerStrategy - S·∫Øp x·∫øp s·∫£n ph·∫©m theo ƒë·ªô b√°n ch·∫°y
 * 
 * Strategy n√†y s·∫Øp x·∫øp danh s√°ch s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng ƒë√£ b√°n,
 * s·∫£n ph·∫©m b√°n nhi·ªÅu nh·∫•t s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã tr∆∞·ªõc.
 * 
 * üéØ Use case: Trang "B√°n ch·∫°y nh·∫•t", "Top s·∫£n ph·∫©m"
 * 
 * üìä Logic: 
 * - T√≠nh t·ªïng s·ªë l∆∞·ª£ng b√°n c·ªßa m·ªói s·∫£n ph·∫©m t·ª´ b·∫£ng ChiTietHoaDon
 * - S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng b√°n gi·∫£m d·∫ßn
 */

const ProductFilterStrategy = require('./ProductFilterStrategy');

class BestSellerStrategy extends ProductFilterStrategy {
  /**
   * L·ªçc v√† s·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng b√°n
   * 
   * @param {Array} products - Danh s√°ch s·∫£n ph·∫©m (ph·∫£i include chiTietHoaDons)
   * @param {Object} query - Tham s·ªë query (minPrice, maxPrice, categoryId)
   * @returns {Array} - S·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp theo b√°n ch·∫°y
   */
  filter(products, query = {}) {
    // B∆∞·ªõc 1: Clone v√† √°p d·ª•ng c√°c filter c∆° b·∫£n
    let filtered = [...products];

    // L·ªçc theo kho·∫£ng gi√°
    filtered = this.filterByPriceRange(
      filtered, 
      query.minPrice, 
      query.maxPrice
    );

    // L·ªçc theo danh m·ª•c
    filtered = this.filterByCategory(filtered, query.categoryId);

    // B∆∞·ªõc 2: T√≠nh t·ªïng s·ªë l∆∞·ª£ng b√°n cho m·ªói s·∫£n ph·∫©m
    const productsWithSalesCount = filtered.map(product => {
      // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu chiTietHoaDons kh√¥ng
      let totalSold = 0;
      
      if (product.chiTietHoaDons && Array.isArray(product.chiTietHoaDons)) {
        // T√≠nh t·ªïng SoLuong t·ª´ t·∫•t c·∫£ c√°c ƒë∆°n h√†ng
        totalSold = product.chiTietHoaDons.reduce((sum, detail) => {
          return sum + (detail.SoLuong || 0);
        }, 0);
      }

      // Th√™m thu·ªôc t√≠nh totalSold v√†o product
      return {
        ...(product.toJSON ? product.toJSON() : product),
        totalSold
      };
    });

    // B∆∞·ªõc 3: S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng b√°n gi·∫£m d·∫ßn
    productsWithSalesCount.sort((a, b) => {
      return b.totalSold - a.totalSold; // Gi·∫£m d·∫ßn: b√°n nhi·ªÅu nh·∫•t tr∆∞·ªõc
    });

    return productsWithSalesCount;
  }
}

module.exports = BestSellerStrategy;
