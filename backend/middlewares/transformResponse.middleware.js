/**
 * üîÑ Middleware chuy·ªÉn ƒë·ªïi PascalCase th√†nh camelCase cho response
 * √Åp d·ª•ng cho t·∫•t c·∫£ API responses ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi frontend
 */

const toCamelCase = (str) => {
  if (!str || typeof str !== 'string') return str;
  return str.charAt(0).toLowerCase() + str.slice(1);
};

const transformKeys = (obj) => {
  if (obj === null || obj === undefined) {
    return obj;
  }

  // N·∫øu l√† array, transform t·ª´ng ph·∫ßn t·ª≠
  if (Array.isArray(obj)) {
    return obj.map(item => transformKeys(item));
  }

  // N·∫øu l√† Date object, gi·ªØ nguy√™n
  if (obj instanceof Date) {
    return obj;
  }

  // N·∫øu kh√¥ng ph·∫£i object, tr·∫£ v·ªÅ nguy√™n gi√° tr·ªã
  if (typeof obj !== 'object') {
    return obj;
  }

  // Transform object keys
  const result = {};
  
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const camelKey = toCamelCase(key);
      const value = obj[key];
      
      // Recursive transform cho nested objects
      if (value !== null && typeof value === 'object' && !(value instanceof Date)) {
        result[camelKey] = transformKeys(value);
      } else {
        result[camelKey] = value;
      }
    }
  }

  return result;
};

/**
 * Express middleware ƒë·ªÉ transform response
 */
const transformResponse = (req, res, next) => {
  // L∆∞u l·∫°i h√†m json g·ªëc
  const originalJson = res.json;

  // Override h√†m json
  res.json = function(data) {
    // Transform data t·ª´ PascalCase sang camelCase
    const transformedData = transformKeys(data);
    
    // G·ªçi h√†m json g·ªëc v·ªõi data ƒë√£ transform
    return originalJson.call(this, transformedData);
  };

  next();
};

module.exports = transformResponse;