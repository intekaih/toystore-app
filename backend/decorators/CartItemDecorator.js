/**
 * üé® DECORATOR PATTERN - BASE DECORATOR
 * 
 * CartItemDecorator: L·ªõp tr·ª´u t∆∞·ª£ng cho t·∫•t c·∫£ decorators
 * ƒê√¢y l√† Decorator c∆° s·ªü trong Decorator Pattern
 */

class CartItemDecorator {
  /**
   * @param {BaseCartItem|CartItemDecorator} cartItem - Item ho·∫∑c decorator ƒë∆∞·ª£c b·ªçc
   */
  constructor(cartItem) {
    if (!cartItem) {
      throw new Error('CartItem is required for decorator');
    }
    this.cartItem = cartItem;
  }

  /**
   * Delegate getPrice() cho component ƒë∆∞·ª£c b·ªçc
   * C√°c decorator con s·∫Ω override ph∆∞∆°ng th·ª©c n√†y
   */
  getPrice() {
    return this.cartItem.getPrice();
  }

  /**
   * Delegate getName() cho component ƒë∆∞·ª£c b·ªçc
   */
  getName() {
    return this.cartItem.getName();
  }

  /**
   * Delegate getQuantity() cho component ƒë∆∞·ª£c b·ªçc
   */
  getQuantity() {
    return this.cartItem.getQuantity();
  }

  /**
   * Delegate getDescription() cho component ƒë∆∞·ª£c b·ªçc
   * C√°c decorator con c√≥ th·ªÉ override ƒë·ªÉ th√™m m√¥ t·∫£
   */
  getDescription() {
    return this.cartItem.getDescription();
  }

  /**
   * L·∫•y th√¥ng tin chi ti·∫øt
   */
  getDetails() {
    return {
      name: this.getName(),
      quantity: this.getQuantity(),
      finalPrice: this.getPrice(),
      description: this.getDescription()
    };
  }
}

module.exports = CartItemDecorator;
