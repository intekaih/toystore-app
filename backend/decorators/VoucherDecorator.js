const CartItemDecorator = require('./CartItemDecorator');

/**
 * üé´ VOUCHER DECORATOR
 * 
 * √Åp d·ª•ng m√£ gi·∫£m gi√° (voucher) cho s·∫£n ph·∫©m
 */
class VoucherDecorator extends CartItemDecorator {
  /**
   * @param {BaseCartItem|CartItemDecorator} cartItem - Item ƒë∆∞·ª£c b·ªçc
   * @param {number} discountAmount - S·ªë ti·ªÅn gi·∫£m gi√° (VNƒê)
   * @param {string} voucherCode - M√£ voucher (optional)
   */
  constructor(cartItem, discountAmount, voucherCode = 'DISCOUNT') {
    super(cartItem);
    this.discountAmount = discountAmount;
    this.voucherCode = voucherCode;
  }

  /**
   * T√≠nh gi√° sau khi tr·ª´ voucher
   * @returns {number} Gi√° g·ªëc - Gi·∫£m gi√° (kh√¥ng √¢m)
   */
  getPrice() {
    const originalPrice = this.cartItem.getPrice();
    const finalPrice = originalPrice - this.discountAmount;
    // ƒê·∫£m b·∫£o gi√° kh√¥ng √¢m
    return Math.max(0, finalPrice);
  }

  /**
   * Th√™m m√¥ t·∫£ v·ªÅ voucher
   */
  getDescription() {
    const originalDesc = this.cartItem.getDescription();
    return `${originalDesc} - Voucher ${this.voucherCode} (-${this.discountAmount.toLocaleString('vi-VN')}ƒë)`;
  }

  /**
   * L·∫•y s·ªë ti·ªÅn gi·∫£m gi√° th·ª±c t·∫ø
   * @returns {number}
   */
  getActualDiscount() {
    const originalPrice = this.cartItem.getPrice();
    return Math.min(this.discountAmount, originalPrice);
  }

  /**
   * Chi ti·∫øt bao g·ªìm th√¥ng tin voucher
   */
  getDetails() {
    const baseDetails = super.getDetails();
    return {
      ...baseDetails,
      voucherCode: this.voucherCode,
      discountAmount: this.discountAmount,
      actualDiscount: this.getActualDiscount()
    };
  }
}

module.exports = VoucherDecorator;
