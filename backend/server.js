require('dotenv').config();
const express = require('express');
const db = require('./models');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Serve static files t·ª´ th∆∞ m·ª•c uploads
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// CORS middleware
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS'); // ‚úÖ Th√™m PATCH
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  } else {
    next();
  }
});

// Routes
app.use('/api/auth', require('./routes/auth.routes'));
app.use('/api/users', require('./routes/user.routes'));
app.use('/api/products', require('./routes/product.routes'));
app.use('/api/cart', require('./routes/cart.routes'));
app.use('/api/orders', require('./routes/order.routes'));
app.use('/api/payment', require('./routes/payment.routes'));
app.use('/api/admin/users', require('./routes/admin.user.routes'));
app.use('/api/admin/categories', require('./routes/category.routes'));
app.use('/api/admin/products', require('./routes/admin.product.routes'));
app.use('/api/admin/orders', require('./routes/admin.order.routes'));
app.use('/api/admin/statistics', require('./routes/admin.statistics.routes'));

// Test route
app.get('/', (req, res) => {
  res.json({ 
    message: "üéÆ API Toystore Backend - Qu·∫£n l√Ω c·ª≠a h√†ng ƒë·ªì ch∆°i",
    timestamp: new Date().toISOString(),
    version: "2.0.0",
    database: "SQL Server - toystore",
    documentation: "Truy c·∫≠p / ƒë·ªÉ xem danh s√°ch ƒë·∫ßy ƒë·ªß c√°c API endpoints",
    endpoints: {
      // ========== AUTHENTICATION ==========
      authentication: {
        register: {
          method: "POST",
          url: "/api/auth/register",
          description: "ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi",
          auth: "Kh√¥ng c·∫ßn",
          rateLimit: "3 l·∫ßn/gi·ªù"
        },
        login: {
          method: "POST",
          url: "/api/auth/login",
          description: "ƒêƒÉng nh·∫≠p user",
          auth: "Kh√¥ng c·∫ßn",
          rateLimit: "5 l·∫ßn/15 ph√∫t"
        },
        adminLogin: {
          method: "POST",
          url: "/api/auth/admin/login",
          description: "ƒêƒÉng nh·∫≠p admin",
          auth: "Kh√¥ng c·∫ßn",
          rateLimit: "5 l·∫ßn/15 ph√∫t"
        }
      },

      // ========== USER PROFILE ==========
      users: {
        getProfile: {
          method: "GET",
          url: "/api/users/profile",
          description: "Xem th√¥ng tin c√° nh√¢n",
          auth: "Token required"
        },
        updateProfile: {
          method: "PUT",
          url: "/api/users/profile",
          description: "C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n",
          auth: "Token required",
          rateLimit: "10 l·∫ßn/gi·ªù"
        }
      },

      // ========== PRODUCTS (PUBLIC) ==========
      products: {
        getAllProducts: {
          method: "GET",
          url: "/api/products?page=1&limit=10&search=keyword",
          description: "L·∫•y danh s√°ch s·∫£n ph·∫©m (public)",
          auth: "Kh√¥ng c·∫ßn",
          params: "page, limit, search"
        },
        getProductById: {
          method: "GET",
          url: "/api/products/:id",
          description: "Xem chi ti·∫øt s·∫£n ph·∫©m (public)",
          auth: "Kh√¥ng c·∫ßn"
        }
      },

      // ========== SHOPPING CART ==========
      cart: {
        getCart: {
          method: "GET",
          url: "/api/cart",
          description: "Xem gi·ªè h√†ng",
          auth: "Token required"
        },
        addToCart: {
          method: "POST",
          url: "/api/cart/add",
          description: "Th√™m s·∫£n ph·∫©m v√†o gi·ªè",
          auth: "Token required",
          rateLimit: "50 l·∫ßn/10 ph√∫t"
        },
        updateCartItem: {
          method: "PUT",
          url: "/api/cart/update",
          description: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè",
          auth: "Token required",
          rateLimit: "50 l·∫ßn/10 ph√∫t"
        },
        removeFromCart: {
          method: "DELETE",
          url: "/api/cart/remove/:productId",
          description: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè",
          auth: "Token required",
          rateLimit: "50 l·∫ßn/10 ph√∫t"
        },
        clearCart: {
          method: "DELETE",
          url: "/api/cart/clear",
          description: "X√≥a to√†n b·ªô gi·ªè h√†ng",
          auth: "Token required",
          rateLimit: "50 l·∫ßn/10 ph√∫t"
        }
      },

      // ========== ORDERS ==========
      orders: {
        createOrder: {
          method: "POST",
          url: "/api/orders/create",
          description: "T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng",
          auth: "Token required",
          rateLimit: "20 l·∫ßn/gi·ªù",
          note: "T·ª± ƒë·ªông tr·ª´ t·ªìn kho & x√≥a gi·ªè h√†ng"
        },
        getMyOrders: {
          method: "GET",
          url: "/api/orders/my-orders",
          description: "Xem danh s√°ch ƒë∆°n h√†ng c·ªßa t√¥i",
          auth: "Token required"
        },
        getOrderHistory: {
          method: "GET",
          url: "/api/orders/history?page=1&limit=10&trangThai=ƒê√£ giao",
          description: "L·ªãch s·ª≠ ƒë∆°n h√†ng chi ti·∫øt c√≥ ph√¢n trang",
          auth: "Token required",
          params: "page, limit, trangThai"
        },
        getOrderDetail: {
          method: "GET",
          url: "/api/orders/:id",
          description: "Xem chi ti·∫øt ƒë∆°n h√†ng",
          auth: "Token required"
        },
        cancelOrder: {
          method: "POST",
          url: "/api/orders/:id/cancel",
          description: "H·ªßy ƒë∆°n h√†ng (ho√†n t·ªìn kho)",
          auth: "Token required",
          rateLimit: "20 l·∫ßn/gi·ªù",
          note: "Ch·ªâ h·ªßy ƒë∆∞·ª£c ƒë∆°n 'Ch·ªù x·ª≠ l√Ω'"
        }
      },

      // ========== PAYMENT - VNPAY ==========
      payment: {
        createPaymentUrl: {
          method: "GET",
          url: "/api/payment/vnpay/create-payment-url?orderId=1&amount=100000&bankCode=NCB",
          description: "T·∫°o URL thanh to√°n VNPay",
          auth: "Token required",
          rateLimit: "10 l·∫ßn/10 ph√∫t",
          params: "orderId, amount, bankCode (optional), language (optional)"
        },
        vnpayReturn: {
          method: "GET",
          url: "/api/payment/vnpay/return",
          description: "X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n t·ª´ VNPay",
          auth: "Kh√¥ng c·∫ßn (VNPay callback)",
          note: "VNPay redirect v·ªÅ ƒë√¢y sau thanh to√°n"
        },
        vnpayIPN: {
          method: "GET",
          url: "/api/payment/vnpay/ipn",
          description: "Nh·∫≠n th√¥ng b√°o t·ª´ VNPay server",
          auth: "Kh√¥ng c·∫ßn (VNPay IPN)",
          note: "VNPay g·ª≠i IPN ƒë·ªÉ confirm giao d·ªãch"
        }
      },

      // ========== ADMIN - USER MANAGEMENT ==========
      adminUsers: {
        getAllUsers: {
          method: "GET",
          url: "/api/admin/users?page=1&limit=10&role=user&enable=true",
          description: "L·∫•y danh s√°ch t·∫•t c·∫£ user",
          auth: "Admin only",
          params: "page, limit, role, enable, search"
        },
        getUserById: {
          method: "GET",
          url: "/api/admin/users/:id",
          description: "Xem chi ti·∫øt user",
          auth: "Admin only"
        },
        createUser: {
          method: "POST",
          url: "/api/admin/users",
          description: "T·∫°o user m·ªõi",
          auth: "Admin only"
        },
        updateUser: {
          method: "PUT",
          url: "/api/admin/users/:id",
          description: "C·∫≠p nh·∫≠t th√¥ng tin user",
          auth: "Admin only"
        },
        updateUserStatus: {
          method: "PATCH",
          url: "/api/admin/users/:id/status",
          description: "Kh√≥a/m·ªü kh√≥a t√†i kho·∫£n",
          auth: "Admin only"
        },
        deleteUser: {
          method: "DELETE",
          url: "/api/admin/users/:id",
          description: "X√≥a user vƒ©nh vi·ªÖn",
          auth: "Admin only",
          note: "C·∫©n th·∫≠n! Kh√¥ng th·ªÉ kh√¥i ph·ª•c"
        }
      },

      // ========== ADMIN - CATEGORY MANAGEMENT ==========
      adminCategories: {
        getAllCategories: {
          method: "GET",
          url: "/api/admin/categories",
          description: "L·∫•y danh s√°ch danh m·ª•c",
          auth: "Admin only"
        },
        createCategory: {
          method: "POST",
          url: "/api/admin/categories",
          description: "T·∫°o danh m·ª•c m·ªõi",
          auth: "Admin only"
        },
        updateCategory: {
          method: "PUT",
          url: "/api/admin/categories/:id",
          description: "C·∫≠p nh·∫≠t danh m·ª•c",
          auth: "Admin only"
        },
        deleteCategory: {
          method: "DELETE",
          url: "/api/admin/categories/:id",
          description: "X√≥a danh m·ª•c",
          auth: "Admin only",
          note: "Ch·ªâ x√≥a ƒë∆∞·ª£c n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m"
        }
      },

      // ========== ADMIN - PRODUCT MANAGEMENT ==========
      adminProducts: {
        getAllProducts: {
          method: "GET",
          url: "/api/admin/products?page=1&limit=10&loaiId=1&enable=true",
          description: "L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (bao g·ªìm c·∫£ ƒë√£ x√≥a)",
          auth: "Admin only",
          params: "page, limit, search, loaiId, enable"
        },
        createProduct: {
          method: "POST",
          url: "/api/admin/products",
          description: "Th√™m s·∫£n ph·∫©m m·ªõi (c√≥ upload ·∫£nh)",
          auth: "Admin only",
          contentType: "multipart/form-data",
          fields: "Ten, MoTa, GiaBan, Ton, LoaiID, hinhAnh (file)"
        },
        updateProduct: {
          method: "PUT",
          url: "/api/admin/products/:id",
          description: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m (c√≥ upload ·∫£nh)",
          auth: "Admin only",
          contentType: "multipart/form-data"
        },
        deleteProduct: {
          method: "DELETE",
          url: "/api/admin/products/:id",
          description: "X√≥a s·∫£n ph·∫©m (soft delete)",
          auth: "Admin only",
          note: "Set Enable = false, kh√¥ng x√≥a v·∫≠t l√Ω"
        }
      },

      // ========== ADMIN - ORDER MANAGEMENT ==========
      adminOrders: {
        getAllOrders: {
          method: "GET",
          url: "/api/admin/orders?page=1&limit=10&trangThai=Ch·ªù x·ª≠ l√Ω&search=HD20250101",
          description: "L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng",
          auth: "Admin only",
          params: "page, limit, trangThai, search (theo m√£ HD)"
        },
        getOrderById: {
          method: "GET",
          url: "/api/admin/orders/:id",
          description: "Xem chi ti·∫øt ƒë∆°n h√†ng",
          auth: "Admin only"
        },
        updateOrderStatus: {
          method: "PATCH",
          url: "/api/admin/orders/:id/status",
          description: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
          auth: "Admin only",
          body: "{ trangThai: 'ƒêang giao', ghiChu: 'Ghi ch√∫' }",
          allowedStatus: "Ch·ªù x·ª≠ l√Ω, ƒêang giao, ƒê√£ giao"
        }
      },

      // ========== ADMIN - STATISTICS ==========
      adminStatistics: {
        getStatistics: {
          method: "GET",
          url: "/api/admin/statistics?year=2025&startDate=2025-01-01&endDate=2025-12-31",
          description: "Th·ªëng k√™ t·ªïng quan ƒë∆°n h√†ng",
          auth: "Admin only",
          params: "year, startDate, endDate",
          returns: "T·ªïng doanh thu, s·ªë ƒë∆°n, theo th√°ng, top kh√°ch h√†ng, top s·∫£n ph·∫©m, 7 ng√†y g·∫ßn nh·∫•t"
        },
        getRevenueStatistics: {
          method: "GET",
          url: "/api/admin/statistics/revenue?groupBy=month&startDate=2025-01-01",
          description: "Th·ªëng k√™ doanh thu chi ti·∫øt",
          auth: "Admin only",
          params: "groupBy (day/week/month/year), startDate, endDate"
        },
        getProductStatistics: {
          method: "GET",
          url: "/api/admin/statistics/products?startDate=2025-01-01",
          description: "Th·ªëng k√™ s·∫£n ph·∫©m chi ti·∫øt",
          auth: "Admin only",
          params: "startDate, endDate",
          returns: "T·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi t·ªïng s·ªë l∆∞·ª£ng b√°n, doanh thu, s·ªë l·∫ßn mua"
        }
      }
    },

    // ========== NOTES ==========
    notes: {
      authentication: "S·ª≠ d·ª•ng JWT Bearer Token trong header: Authorization: Bearer <token>",
      rateLimit: "√Åp d·ª•ng rate limiting ƒë·ªÉ b·∫£o v·ªá API kh·ªèi abuse",
      pagination: "H·∫ßu h·∫øt API list ƒë·ªÅu h·ªó tr·ª£ ph√¢n trang v·ªõi page & limit",
      softDelete: "S·∫£n ph·∫©m s·ª≠ d·ª•ng soft delete (Enable = false)",
      transactions: "T·∫°o ƒë∆°n h√†ng & h·ªßy ƒë∆°n s·ª≠ d·ª•ng database transactions",
      upload: "Upload ·∫£nh s·∫£n ph·∫©m gi·ªõi h·∫°n 5MB, ch·ªâ ch·∫•p nh·∫≠n JPEG/PNG/GIF/WEBP"
    },

    // ========== STATUS CODES ==========
    statusCodes: {
      200: "OK - Th√†nh c√¥ng",
      201: "Created - T·∫°o m·ªõi th√†nh c√¥ng",
      400: "Bad Request - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
      401: "Unauthorized - Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá",
      403: "Forbidden - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
      404: "Not Found - Kh√¥ng t√¨m th·∫•y",
      409: "Conflict - D·ªØ li·ªáu b·ªã tr√πng l·∫∑p",
      429: "Too Many Requests - V∆∞·ª£t qu√° gi·ªõi h·∫°n rate limit",
      500: "Internal Server Error - L·ªói server"
    }
  });
});

// Protected routes demo
const authMiddleware = require('./middlewares/auth.middleware');

app.get('/api/profile', authMiddleware.verifyToken, (req, res) => {
  res.json({
    success: true,
    message: 'Th√¥ng tin ng∆∞·ªùi d√πng',
    data: req.user
  });
});

app.get('/api/admin', 
  authMiddleware.verifyToken, 
  authMiddleware.requireAdmin, 
  (req, res) => {
    res.json({
      success: true,
      message: 'Ch√†o m·ª´ng Admin!',
      data: {
        user: req.user,
        adminAccess: true
      }
    });
  }
);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: "Endpoint kh√¥ng t·ªìn t·∫°i",
    path: req.originalUrl
  });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error('‚ùå Global Error:', err);
  res.status(500).json({
    success: false,
    message: "L·ªói server n·ªôi b·ªô",
    error: process.env.NODE_ENV === 'development' ? err.message : 'Internal Server Error'
  });
});

// K·∫øt n·ªëi database v√† kh·ªüi ƒë·ªông server (KH√îNG sync ƒë·ªÉ tr√°nh thay ƒë·ªïi c·∫•u tr√∫c)
db.sequelize.authenticate()
  .then(() => {
    console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!");
    app.listen(PORT, () => {
      console.log('\n' + '='.repeat(80));
      console.log('üéÆ TOYSTORE BACKEND API SERVER');
      console.log('='.repeat(80));
      console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
      console.log(`üìç URL: http://localhost:${PORT}`);
      console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üìä Database: ${process.env.DB_NAME} - ${process.env.DB_HOST}`);
      console.log('='.repeat(80));
      
      console.log('\nüìö AUTHENTICATION ENDPOINTS:');
      console.log('   POST   /api/auth/register           - ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi');
      console.log('   POST   /api/auth/login              - ƒêƒÉng nh·∫≠p user');
      console.log('   POST   /api/auth/admin/login        - ƒêƒÉng nh·∫≠p admin');
      
      console.log('\nüë§ USER PROFILE ENDPOINTS:');
      console.log('   GET    /api/users/profile           - Xem th√¥ng tin c√° nh√¢n (Token)');
      console.log('   PUT    /api/users/profile           - C·∫≠p nh·∫≠t th√¥ng tin (Token)');
      
      console.log('\nüì¶ PRODUCTS ENDPOINTS (PUBLIC):');
      console.log('   GET    /api/products                - L·∫•y danh s√°ch s·∫£n ph·∫©m');
      console.log('   GET    /api/products/:id            - Chi ti·∫øt s·∫£n ph·∫©m');
      
      console.log('\nüõí SHOPPING CART ENDPOINTS:');
      console.log('   GET    /api/cart                    - Xem gi·ªè h√†ng (Token)');
      console.log('   POST   /api/cart/add                - Th√™m v√†o gi·ªè (Token)');
      console.log('   PUT    /api/cart/update             - C·∫≠p nh·∫≠t gi·ªè (Token)');
      console.log('   DELETE /api/cart/remove/:productId  - X√≥a kh·ªèi gi·ªè (Token)');
      console.log('   DELETE /api/cart/clear              - X√≥a to√†n b·ªô gi·ªè (Token)');
      
      console.log('\nüìã ORDERS ENDPOINTS:');
      console.log('   POST   /api/orders/create           - T·∫°o ƒë∆°n h√†ng (Token)');
      console.log('   GET    /api/orders/my-orders        - Danh s√°ch ƒë∆°n h√†ng (Token)');
      console.log('   GET    /api/orders/history          - L·ªãch s·ª≠ ƒë∆°n h√†ng (Token)');
      console.log('   GET    /api/orders/:id              - Chi ti·∫øt ƒë∆°n h√†ng (Token)');
      console.log('   POST   /api/orders/:id/cancel       - H·ªßy ƒë∆°n h√†ng (Token)');
      
      console.log('\nüí≥ PAYMENT ENDPOINTS (VNPAY):');
      console.log('   GET    /api/payment/vnpay/create-payment-url  - T·∫°o URL thanh to√°n (Token)');
      console.log('   GET    /api/payment/vnpay/return              - X·ª≠ l√Ω return t·ª´ VNPay');
      console.log('   GET    /api/payment/vnpay/ipn                 - Nh·∫≠n IPN t·ª´ VNPay');
      
      console.log('\nüîê ADMIN - USER MANAGEMENT:');
      console.log('   GET    /api/admin/users             - Danh s√°ch users (Admin)');
      console.log('   GET    /api/admin/users/:id         - Chi ti·∫øt user (Admin)');
      console.log('   POST   /api/admin/users             - T·∫°o user m·ªõi (Admin)');
      console.log('   PUT    /api/admin/users/:id         - C·∫≠p nh·∫≠t user (Admin)');
      console.log('   PATCH  /api/admin/users/:id/status  - Kh√≥a/m·ªü user (Admin)');
      console.log('   DELETE /api/admin/users/:id         - X√≥a user (Admin)');
      
      console.log('\nüóÇÔ∏è  ADMIN - CATEGORY MANAGEMENT:');
      console.log('   GET    /api/admin/categories        - Danh s√°ch danh m·ª•c (Admin)');
      console.log('   POST   /api/admin/categories        - T·∫°o danh m·ª•c (Admin)');
      console.log('   PUT    /api/admin/categories/:id    - C·∫≠p nh·∫≠t danh m·ª•c (Admin)');
      console.log('   DELETE /api/admin/categories/:id    - X√≥a danh m·ª•c (Admin)');
      
      console.log('\nüì¶ ADMIN - PRODUCT MANAGEMENT:');
      console.log('   GET    /api/admin/products          - Danh s√°ch s·∫£n ph·∫©m (Admin)');
      console.log('   POST   /api/admin/products          - Th√™m s·∫£n ph·∫©m + upload (Admin)');
      console.log('   PUT    /api/admin/products/:id      - C·∫≠p nh·∫≠t s·∫£n ph·∫©m (Admin)');
      console.log('   DELETE /api/admin/products/:id      - X√≥a s·∫£n ph·∫©m (Admin)');
      
      console.log('\nüìã ADMIN - ORDER MANAGEMENT:');
      console.log('   GET    /api/admin/orders            - Danh s√°ch ƒë∆°n h√†ng (Admin)');
      console.log('   GET    /api/admin/orders/:id        - Chi ti·∫øt ƒë∆°n h√†ng (Admin)');
      console.log('   PATCH  /api/admin/orders/:id/status - C·∫≠p nh·∫≠t tr·∫°ng th√°i (Admin)');
      
      console.log('\nüìä ADMIN - STATISTICS:');
      console.log('   GET    /api/admin/statistics        - Th·ªëng k√™ t·ªïng quan (Admin)');
      console.log('   GET    /api/admin/statistics/revenue   - Th·ªëng k√™ doanh thu (Admin)');
      console.log('   GET    /api/admin/statistics/products  - Th·ªëng k√™ s·∫£n ph·∫©m (Admin)');
      
      console.log('\n' + '='.repeat(80));
      console.log('üìù NOTES:');
      console.log('   ‚Ä¢ (Token) = Y√™u c·∫ßu JWT Bearer Token');
      console.log('   ‚Ä¢ (Admin) = Ch·ªâ admin m·ªõi ƒë∆∞·ª£c truy c·∫≠p');
      console.log('   ‚Ä¢ Xem chi ti·∫øt API: GET http://localhost:' + PORT + '/');
      console.log('   ‚Ä¢ Rate limiting ƒë∆∞·ª£c √°p d·ª•ng cho h·∫ßu h·∫øt endpoints');
      console.log('='.repeat(80) + '\n');
      
      console.log('‚ú® Server s·∫µn s√†ng nh·∫≠n request!');
      console.log('üîó T√†i kho·∫£n admin m·∫∑c ƒë·ªãnh: admin / admin123\n');
    });
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi database:", err);
    process.exit(1);
  });