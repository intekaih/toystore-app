require('dotenv').config();
const { Sequelize } = require('sequelize');

async function testConnection() {
  console.log('üîß ƒêang test k·∫øt n·ªëi SQL Server...');
  console.log('Config:', {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    database: process.env.DB_NAME
  });

  const sequelize = new Sequelize({
    dialect: 'mssql',
    host: process.env.DB_HOST,
    port: parseInt(process.env.DB_PORT),
    username: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: 'master', // K·∫øt n·ªëi v√†o master tr∆∞·ªõc
    dialectOptions: {
      options: {
        encrypt: false,
        trustServerCertificate: true,
        enableArithAbort: true,
        requestTimeout: 30000,
        connectionTimeout: 30000
      }
    },
    logging: console.log,
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000
    }
  });

  try {
    // Test k·∫øt n·ªëi
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng!');

    // T·∫°o database n·∫øu ch∆∞a c√≥
    await sequelize.query(`
      IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '${process.env.DB_NAME}')
      BEGIN
        CREATE DATABASE [${process.env.DB_NAME}]
        PRINT 'Database ${process.env.DB_NAME} ƒë√£ ƒë∆∞·ª£c t·∫°o!'
      END
      ELSE
        PRINT 'Database ${process.env.DB_NAME} ƒë√£ t·ªìn t·∫°i!'
    `);

    console.log('‚úÖ Database ƒë√£ s·∫µn s√†ng!');
    
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
    console.error('Chi ti·∫øt l·ªói:', error.original?.message || error);
  } finally {
    await sequelize.close();
  }
}

testConnection();