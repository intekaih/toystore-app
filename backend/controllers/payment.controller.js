const crypto = require('crypto');
const querystring = require('qs');
const vnpayConfig = require('../config/vnpay.config');
const db = require('../models');
const HoaDon = db.HoaDon;
const ChiTietHoaDon = db.ChiTietHoaDon;

/**
 * S·∫Øp x·∫øp object theo key (y√™u c·∫ßu c·ªßa VNPay)
 */
function sortObject(obj) {
  let sorted = {};
  let str = [];
  let key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      str.push(encodeURIComponent(key));
    }
  }
  str.sort();
  for (key = 0; key < str.length; key++) {
    sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
  }
  return sorted;
}

/**
 * T·∫°o ch·ªØ k√Ω secure hash SHA256
 */
function createSecureHash(data, secretKey) {
  const hmac = crypto.createHmac('sha512', secretKey);
  const signed = hmac.update(Buffer.from(data, 'utf-8')).digest('hex');
  return signed;
}

/**
 * T·∫°o URL thanh to√°n VNPay
 * GET /api/payment/vnpay/create-payment-url
 */
exports.createVNPayPaymentUrl = async (req, res) => {
  try {
    console.log('üí≥ T·∫°o URL thanh to√°n VNPay - Params:', req.query);

    const { orderId, amount, bankCode, language } = req.query;
    const taiKhoanId = req.user.id;

    // Validate input
    if (!orderId) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu m√£ ƒë∆°n h√†ng (orderId)'
      });
    }

    if (!amount || amount <= 0) {
      return res.status(400).json({
        success: false,
        message: 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá'
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user kh√¥ng
    const hoaDon = await HoaDon.findOne({
      where: {
        ID: orderId,
        Enable: true
      },
      include: [{
        model: db.KhachHang,
        as: 'khachHang',
        required: true
      }]
    });

    if (!hoaDon) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    // L·∫•y IP address c·ªßa client
    let ipAddr = req.headers['x-forwarded-for'] ||
      req.connection.remoteAddress ||
      req.socket.remoteAddress ||
      req.connection.socket.remoteAddress;

    // L·∫•y IPv4 n·∫øu c√≥ IPv6
    if (ipAddr && ipAddr.includes('::ffff:')) {
      ipAddr = ipAddr.split('::ffff:')[1];
    }

    // T·∫°o ng√†y gi·ªù theo format c·ªßa VNPay: yyyyMMddHHmmss
    const createDate = new Date();
    const vnp_CreateDate = createDate.toISOString()
      .replace(/[-:TZ.]/g, '')
      .slice(0, 14);

    // T·∫°o m√£ giao d·ªãch unique (txnRef)
    const vnp_TxnRef = `${hoaDon.MaHD}_${Date.now()}`;

    // T·∫°o order info
    const vnp_OrderInfo = `Thanh toan don hang ${hoaDon.MaHD}`;

    // Build VNPay parameters
    let vnp_Params = {
      vnp_Version: vnpayConfig.vnp_Version,
      vnp_Command: vnpayConfig.vnp_Command,
      vnp_TmnCode: vnpayConfig.vnp_TmnCode,
      vnp_Locale: language || vnpayConfig.vnp_Locale,
      vnp_CurrCode: vnpayConfig.vnp_CurrCode,
      vnp_TxnRef: vnp_TxnRef,
      vnp_OrderInfo: vnp_OrderInfo,
      vnp_OrderType: vnpayConfig.vnp_OrderType,
      vnp_Amount: parseInt(amount) * 100, // VNPay y√™u c·∫ßu amount * 100
      vnp_ReturnUrl: vnpayConfig.vnp_ReturnUrl,
      vnp_IpAddr: ipAddr,
      vnp_CreateDate: vnp_CreateDate
    };

    // Th√™m bankCode n·∫øu c√≥ (cho ph√©p ch·ªçn ng√¢n h√†ng c·ª• th·ªÉ)
    if (bankCode) {
      vnp_Params.vnp_BankCode = bankCode;
    }

    console.log('üìù VNPay params tr∆∞·ªõc khi sort:', vnp_Params);

    // S·∫Øp x·∫øp params theo key (y√™u c·∫ßu c·ªßa VNPay)
    vnp_Params = sortObject(vnp_Params);

    console.log('üìù VNPay params sau khi sort:', vnp_Params);

    // T·∫°o query string
    const signData = querystring.stringify(vnp_Params, { encode: false });

    console.log('üìù Sign data:', signData);

    // T·∫°o secure hash
    const secureHash = createSecureHash(signData, vnpayConfig.vnp_HashSecret);

    console.log('üîê Secure hash:', secureHash);

    // Th√™m secure hash v√†o params
    vnp_Params['vnp_SecureHash'] = secureHash;

    // T·∫°o URL thanh to√°n
    const paymentUrl = vnpayConfig.vnp_Url + '?' + querystring.stringify(vnp_Params, { encode: false });

    console.log('‚úÖ T·∫°o URL thanh to√°n th√†nh c√¥ng');
    console.log('üîó Payment URL:', paymentUrl);

    res.status(200).json({
      success: true,
      message: 'T·∫°o URL thanh to√°n VNPay th√†nh c√¥ng',
      data: {
        paymentUrl: paymentUrl,
        orderId: orderId,
        orderCode: hoaDon.MaHD,
        amount: parseInt(amount),
        txnRef: vnp_TxnRef
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o URL thanh to√°n VNPay:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

/**
 * X·ª≠ l√Ω Return URL t·ª´ VNPay (sau khi kh√°ch h√†ng thanh to√°n)
 * GET /api/payment/vnpay/return
 */
exports.vnpayReturn = async (req, res) => {
  try {
    console.log('üîô VNPay Return - Query params:', req.query);

    let vnp_Params = req.query;

    // L·∫•y secure hash t·ª´ VNPay g·ª≠i v·ªÅ
    const secureHash = vnp_Params['vnp_SecureHash'];

    // X√≥a c√°c tham s·ªë kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ verify
    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    // S·∫Øp x·∫øp params
    vnp_Params = sortObject(vnp_Params);

    // T·∫°o sign data
    const signData = querystring.stringify(vnp_Params, { encode: false });

    console.log('üìù Sign data for verification:', signData);

    // T·∫°o secure hash ƒë·ªÉ verify
    const checkSum = createSecureHash(signData, vnpayConfig.vnp_HashSecret);

    console.log('üîê CheckSum:', checkSum);
    console.log('üîê SecureHash from VNPay:', secureHash);

    // Verify secure hash
    if (secureHash !== checkSum) {
      console.error('‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá');
      // Redirect v·ªÅ frontend v·ªõi error
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      return res.redirect(`${frontendUrl}/payment/return?success=false&message=Invalid_signature`);
    }

    // L·∫•y th√¥ng tin t·ª´ VNPay
    const vnp_TxnRef = vnp_Params['vnp_TxnRef'];
    const vnp_Amount = vnp_Params['vnp_Amount'] / 100; // Chia 100 v√¨ VNPay nh√¢n 100
    const vnp_ResponseCode = vnp_Params['vnp_ResponseCode'];
    const vnp_TransactionNo = vnp_Params['vnp_TransactionNo'];
    const vnp_BankCode = vnp_Params['vnp_BankCode'];
    const vnp_PayDate = vnp_Params['vnp_PayDate'];

    console.log('üí∞ Th√¥ng tin giao d·ªãch:', {
      txnRef: vnp_TxnRef,
      amount: vnp_Amount,
      responseCode: vnp_ResponseCode,
      transactionNo: vnp_TransactionNo,
      bankCode: vnp_BankCode,
      payDate: vnp_PayDate
    });

    // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n
    if (vnp_ResponseCode === '00') {
      // Thanh to√°n th√†nh c√¥ng
      console.log('‚úÖ Giao d·ªãch th√†nh c√¥ng');

      // L·∫•y orderId t·ª´ txnRef (format: MaHD_timestamp)
      const orderCode = vnp_TxnRef.split('_')[0];

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      const hoaDon = await HoaDon.findOne({
        where: { MaHD: orderCode }
      });

      if (hoaDon) {
        await hoaDon.update({
          TrangThai: 'ƒê√£ thanh to√°n',
          GhiChu: `Thanh to√°n VNPay - M√£ GD: ${vnp_TransactionNo} - Ng√¢n h√†ng: ${vnp_BankCode}`
        });
        console.log('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng');
      }

      // Redirect v·ªÅ frontend v·ªõi success
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      const redirectParams = new URLSearchParams({
        success: 'true',
        orderId: hoaDon?.ID || '',
        orderCode: orderCode,
        amount: vnp_Amount,
        transactionNo: vnp_TransactionNo,
        bankCode: vnp_BankCode,
        payDate: vnp_PayDate,
        responseCode: vnp_ResponseCode
      });
      
      return res.redirect(`${frontendUrl}/payment/return?${redirectParams.toString()}`);
    } else {
      // Thanh to√°n th·∫•t b·∫°i
      console.log('‚ùå Giao d·ªãch th·∫•t b·∫°i - M√£ l·ªói:', vnp_ResponseCode);

      // Map m√£ l·ªói VNPay
      const errorMessages = {
        '07': 'Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).',
        '09': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.',
        '10': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn',
        '11': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.',
        '12': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.',
        '13': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP).',
        '24': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch',
        '51': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.',
        '65': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.',
        '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.',
        '79': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh.',
        '99': 'C√°c l·ªói kh√°c (l·ªói c√≤n l·∫°i, kh√¥ng c√≥ trong danh s√°ch m√£ l·ªói ƒë√£ li·ªát k√™)'
      };

      const errorMessage = errorMessages[vnp_ResponseCode] || 'Giao d·ªãch kh√¥ng th√†nh c√¥ng';

      // Redirect v·ªÅ frontend v·ªõi error
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      const redirectParams = new URLSearchParams({
        success: 'false',
        responseCode: vnp_ResponseCode,
        message: encodeURIComponent(errorMessage),
        txnRef: vnp_TxnRef,
        amount: vnp_Amount
      });
      
      return res.redirect(`${frontendUrl}/payment/return?${redirectParams.toString()}`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω VNPay return:', error);
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    return res.redirect(`${frontendUrl}/payment/return?success=false&message=Server_error`);
  }
};

/**
 * X·ª≠ l√Ω IPN (Instant Payment Notification) t·ª´ VNPay
 * POST /api/payment/vnpay/ipn
 */
exports.vnpayIPN = async (req, res) => {
  try {
    console.log('üì® VNPay IPN - Query params:', req.query);

    let vnp_Params = req.query;

    // L·∫•y secure hash
    const secureHash = vnp_Params['vnp_SecureHash'];

    // X√≥a c√°c tham s·ªë kh√¥ng c·∫ßn verify
    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    // S·∫Øp x·∫øp params
    vnp_Params = sortObject(vnp_Params);

    // T·∫°o sign data
    const signData = querystring.stringify(vnp_Params, { encode: false });

    // Verify secure hash
    const checkSum = createSecureHash(signData, vnpayConfig.vnp_HashSecret);

    if (secureHash !== checkSum) {
      console.error('‚ùå IPN - Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá');
      return res.status(200).json({
        RspCode: '97',
        Message: 'Invalid Checksum'
      });
    }

    // L·∫•y th√¥ng tin
    const vnp_TxnRef = vnp_Params['vnp_TxnRef'];
    const vnp_Amount = vnp_Params['vnp_Amount'] / 100;
    const vnp_ResponseCode = vnp_Params['vnp_ResponseCode'];
    const vnp_TransactionNo = vnp_Params['vnp_TransactionNo'];
    const vnp_BankCode = vnp_Params['vnp_BankCode'];

    console.log('üí∞ IPN - Th√¥ng tin giao d·ªãch:', {
      txnRef: vnp_TxnRef,
      amount: vnp_Amount,
      responseCode: vnp_ResponseCode,
      transactionNo: vnp_TransactionNo
    });

    // L·∫•y orderId t·ª´ txnRef
    const orderCode = vnp_TxnRef.split('_')[0];

    // T√¨m ƒë∆°n h√†ng
    const hoaDon = await HoaDon.findOne({
      where: { MaHD: orderCode }
    });

    if (!hoaDon) {
      console.error('‚ùå IPN - Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng');
      return res.status(200).json({
        RspCode: '01',
        Message: 'Order not found'
      });
    }

    // Ki·ªÉm tra s·ªë ti·ªÅn
    if (parseFloat(hoaDon.TongTien) !== vnp_Amount) {
      console.error('‚ùå IPN - S·ªë ti·ªÅn kh√¥ng kh·ªõp');
      return res.status(200).json({
        RspCode: '04',
        Message: 'Invalid amount'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (hoaDon.TrangThai === 'ƒê√£ thanh to√°n') {
      console.log('‚ö†Ô∏è IPN - ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥');
      return res.status(200).json({
        RspCode: '02',
        Message: 'Order already confirmed'
      });
    }

    // X·ª≠ l√Ω theo response code
    if (vnp_ResponseCode === '00') {
      // Thanh to√°n th√†nh c√¥ng - c·∫≠p nh·∫≠t ƒë∆°n h√†ng
      await hoaDon.update({
        TrangThai: 'ƒê√£ thanh to√°n',
        GhiChu: `Thanh to√°n VNPay - M√£ GD: ${vnp_TransactionNo} - Ng√¢n h√†ng: ${vnp_BankCode}`
      });

      console.log('‚úÖ IPN - C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng');

      return res.status(200).json({
        RspCode: '00',
        Message: 'Success'
      });
    } else {
      // Thanh to√°n th·∫•t b·∫°i
      await hoaDon.update({
        TrangThai: 'Thanh to√°n th·∫•t b·∫°i',
        GhiChu: `Thanh to√°n VNPay th·∫•t b·∫°i - M√£ l·ªói: ${vnp_ResponseCode}`
      });

      console.log('‚ùå IPN - Thanh to√°n th·∫•t b·∫°i');

      return res.status(200).json({
        RspCode: '00',
        Message: 'Success'
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω VNPay IPN:', error);
    return res.status(200).json({
      RspCode: '99',
      Message: 'Unknown error'
    });
  }
};
