const db = require('../models');
const HoaDon = db.HoaDon;
const ChiTietHoaDon = db.ChiTietHoaDon;
const GioHang = db.GioHang;
const GioHangChiTiet = db.GioHangChiTiet;
const SanPham = db.SanPham;
const KhachHang = db.KhachHang;
const PhuongThucThanhToan = db.PhuongThucThanhToan;
const TaiKhoan = db.TaiKhoan;

// H√†m t·∫°o m√£ h√≥a ƒë∆°n t·ª± ƒë·ªông
const generateOrderCode = async () => {
  const today = new Date();
  const dateStr = today.toISOString().slice(0, 10).replace(/-/g, ''); // Format: YYYYMMDD
  
  // T√¨m h√≥a ƒë∆°n cu·ªëi c√πng trong ng√†y
  const lastOrder = await HoaDon.findOne({
    where: {
      MaHD: {
        [db.Sequelize.Op.like]: `HD${dateStr}%`
      }
    },
    order: [['ID', 'DESC']]
  });
  
  let sequence = 1;
  if (lastOrder) {
    const lastSequence = parseInt(lastOrder.MaHD.slice(-3));
    sequence = lastSequence + 1;
  }
  
  const orderCode = `HD${dateStr}${sequence.toString().padStart(3, '0')}`;
  return orderCode;
};

// T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
exports.createOrder = async (req, res) => {
  // B·∫Øt ƒë·∫ßu transaction
  const transaction = await db.sequelize.transaction();
  
  try {
    console.log('üõí B·∫Øt ƒë·∫ßu t·∫°o ƒë∆°n h√†ng cho user:', req.user.id);
    
    const taiKhoanId = req.user.id;
    const { 
      phuongThucThanhToanId = 1, 
      ghiChu = '', 
      diaChiGiaoHang = '',
      // ‚ú® NH·∫¨N D·ªÆ LI·ªÜU T·ª™ DECORATOR PATTERN (Frontend)
      tongTienSauKhuyenMai,
      apDungVAT,
      tyLeVAT: tyLeVATFromFrontend,
      voucher,
      phiVanChuyen: phiVanChuyenFromFrontend,
      miemPhiVanChuyen: miemPhiVanChuyenFromFrontend
    } = req.body;

    console.log('üì¶ D·ªØ li·ªáu t·ª´ Decorator Pattern:', {
      tongTienSauKhuyenMai,
      apDungVAT,
      tyLeVAT: tyLeVATFromFrontend,
      voucher,
      phiVanChuyen: phiVanChuyenFromFrontend,
      miemPhiVanChuyen: miemPhiVanChuyenFromFrontend
    });

    // Validate ph∆∞∆°ng th·ª©c thanh to√°n
    if (!phuongThucThanhToanId) {
      await transaction.rollback();
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n'
      });
    }

    // Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n c√≥ t·ªìn t·∫°i kh√¥ng
    const phuongThucThanhToan = await PhuongThucThanhToan.findOne({
      where: {
        ID: phuongThucThanhToanId,
        Enable: true
      }
    });

    if (!phuongThucThanhToan) {
      await transaction.rollback();
      return res.status(404).json({
        success: false,
        message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá'
      });
    }

    // B∆∞·ªõc 1: L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const gioHang = await GioHang.findOne({
      where: { TaiKhoanID: taiKhoanId },
      include: [{
        model: GioHangChiTiet,
        as: 'chiTiet',
        include: [{
          model: SanPham,
          as: 'sanPham',
          attributes: ['ID', 'Ten', 'GiaBan', 'Ton', 'Enable']
        }]
      }],
      transaction
    });

    // Ki·ªÉm tra gi·ªè h√†ng c√≥ t·ªìn t·∫°i v√† c√≥ s·∫£n ph·∫©m kh√¥ng
    if (!gioHang || !gioHang.chiTiet || gioHang.chiTiet.length === 0) {
      await transaction.rollback();
      return res.status(400).json({
        success: false,
        message: 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng'
      });
    }

    console.log(`üì¶ T√¨m th·∫•y ${gioHang.chiTiet.length} s·∫£n ph·∫©m trong gi·ªè h√†ng`);

    // Validate t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    const validationErrors = [];
    for (const item of gioHang.chiTiet) {
      if (!item.sanPham || !item.sanPham.Enable) {
        validationErrors.push(`S·∫£n ph·∫©m "${item.sanPham?.Ten || 'Unknown'}" kh√¥ng c√≤n t·ªìn t·∫°i ho·∫∑c ƒë√£ ng·ª´ng kinh doanh`);
        continue;
      }

      if (item.SoLuong > item.sanPham.Ton) {
        validationErrors.push(`S·∫£n ph·∫©m "${item.sanPham.Ten}" ch·ªâ c√≤n ${item.sanPham.Ton} trong kho`);
      }
    }

    if (validationErrors.length > 0) {
      await transaction.rollback();
      return res.status(400).json({
        success: false,
        message: 'C√≥ l·ªói v·ªõi m·ªôt s·ªë s·∫£n ph·∫©m trong gi·ªè h√†ng',
        errors: validationErrors
      });
    }

    // T√≠nh t·ªïng ti·ªÅn
    let tongTien = 0;
    let tienGoc = 0;
    let tienVAT = 0;
    let tienGiamGia = 0; // ‚úÖ M·∫∑c ƒë·ªãnh = 0, kh√¥ng ƒë·ªÉ NULL
    let phiVanChuyen = phiVanChuyenFromFrontend || 30000;
    let maVoucher = null;
    let tyLeVAT = 0;
    let miemPhiVanChuyen = miemPhiVanChuyenFromFrontend || false;
    
    // T√≠nh t·∫°m t√≠nh (gi√° g·ªëc t·ª´ gi·ªè h√†ng)
    gioHang.chiTiet.forEach(item => {
      tienGoc += parseFloat(item.DonGia) * item.SoLuong;
    });
    
    if (tongTienSauKhuyenMai && tongTienSauKhuyenMai > 0) {
      // ‚úÖ S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ Frontend (Decorator Pattern ƒë√£ t√≠nh)
      tongTien = tongTienSauKhuyenMai;
      
      // L·∫•y chi ti·∫øt t·ª´ Frontend
      if (apDungVAT && tyLeVATFromFrontend) {
        tyLeVAT = tyLeVATFromFrontend;
        tienVAT = Math.round(tienGoc * tyLeVAT);
      }
      
      // ‚úÖ ƒê·∫¢M B·∫¢O tienGiamGia LU√îN L√Ä S·ªê (0 ho·∫∑c > 0), KH√îNG BAO GI·ªú NULL
      if (voucher && voucher.code && voucher.discount) {
        maVoucher = voucher.code;
        tienGiamGia = Math.round(voucher.discount); // ‚úÖ L√†m tr√≤n ƒë·ªÉ ƒë·∫£m b·∫£o l√† s·ªë nguy√™n
      } else {
        tienGiamGia = 0; // ‚úÖ Kh√¥ng c√≥ voucher = 0 (kh√¥ng ph·∫£i NULL)
      }
      
      phiVanChuyen = miemPhiVanChuyen ? 0 : (phiVanChuyenFromFrontend || 30000);
      
      console.log(`üí∞ Chi ti·∫øt gi√° t·ª´ Decorator Pattern:`, {
        tienGoc,
        tienVAT,
        tyLeVAT,
        maVoucher,
        tienGiamGia, // ‚úÖ Lu√¥n l√† s·ªë (0 ho·∫∑c > 0)
        phiVanChuyen,
        miemPhiVanChuyen,
        tongTien
      });
    } else {
      // ‚ùå Fallback: T√≠nh t·ª´ gi√° g·ªëc trong DB (n·∫øu Frontend kh√¥ng g·ª≠i)
      tongTien = tienGoc;
      tienGiamGia = 0; // ‚úÖ ƒê·∫£m b·∫£o = 0 thay v√¨ NULL
      console.log(`‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu Decorator Pattern, d√πng gi√° g·ªëc: ${tongTien.toLocaleString('vi-VN')} VNƒê`);
    }

    console.log(`üí∞ T·ªïng ti·ªÅn ƒë∆°n h√†ng: ${tongTien.toLocaleString('vi-VN')} VNƒê`);

    // ‚ú® T√çNH T·ª∂ L·ªÜ √ÅP D·ª§NG CHO T·ª™NG S·∫¢N PH·∫®M (ƒë·ªÉ l∆∞u v√†o ChiTietHoaDon)
    const tyLeApDung = tongTienSauKhuyenMai && tienGoc > 0
      ? tongTienSauKhuyenMai / tienGoc
      : 1;

    console.log(`üìä T·ª∑ l·ªá √°p d·ª•ng cho t·ª´ng s·∫£n ph·∫©m: ${(tyLeApDung * 100).toFixed(2)}%`);

    // L·∫•y th√¥ng tin t√†i kho·∫£n ƒë·ªÉ t·∫°o kh√°ch h√†ng
    const taiKhoan = await TaiKhoan.findByPk(taiKhoanId, { transaction });

    // T·∫°o ho·∫∑c l·∫•y kh√°ch h√†ng
    let khachHang = await KhachHang.findOne({
      where: {
        Email: taiKhoan.Email || null,
        HoTen: taiKhoan.HoTen
      },
      transaction
    });

    if (!khachHang) {
      // T·∫°o kh√°ch h√†ng m·ªõi
      khachHang = await KhachHang.create({
        HoTen: taiKhoan.HoTen,
        Email: taiKhoan.Email || null,
        DienThoai: taiKhoan.DienThoai || null,
        DiaChi: diaChiGiaoHang || null
      }, { transaction });
      
      console.log('üë§ ƒê√£ t·∫°o kh√°ch h√†ng m·ªõi:', khachHang.ID);
    } else {
      // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ n·∫øu c√≥
      if (diaChiGiaoHang) {
        await khachHang.update({ DiaChi: diaChiGiaoHang }, { transaction });
      }
      console.log('üë§ S·ª≠ d·ª•ng kh√°ch h√†ng c√≥ s·∫µn:', khachHang.ID);
    }

    // B∆∞·ªõc 2: T·∫°o m√£ h√≥a ƒë∆°n
    const maHoaDon = await generateOrderCode();
    console.log('üìÑ M√£ h√≥a ƒë∆°n:', maHoaDon);

    // ‚ú® T·∫°o h√≥a ƒë∆°n v·ªõi TO√ÄN B·ªò c√°c tr∆∞·ªùng m·ªõi
    const hoaDon = await HoaDon.create({
      MaHD: maHoaDon,
      KhachHangID: khachHang.ID,
      TongTien: tongTien,
      
      // ‚ú® L∆ØU CHI TI·∫æT V√ÄO C√ÅC TR∆Ø·ªúNG M·ªöI (Decorator Pattern data)
      TienGoc: tienGoc,
      TienVAT: tienVAT,
      TyLeVAT: tyLeVAT || 0,
      MaVoucher: maVoucher,
      TienGiamGia: tienGiamGia,
      PhiVanChuyen: phiVanChuyen,
      MiemPhiVanChuyen: miemPhiVanChuyen,
      
      PhuongThucThanhToanID: phuongThucThanhToanId,
      TrangThai: 'Ch·ªù x·ª≠ l√Ω',
      GhiChu: ghiChu || null
    }, { transaction });

    console.log('‚úÖ ƒê√£ t·∫°o h√≥a ƒë∆°n:', hoaDon.ID, '- Chi ti·∫øt:', {
      TienGoc: tienGoc,
      TienVAT: tienVAT,
      MaVoucher: maVoucher,
      TienGiamGia: tienGiamGia,
      PhiVanChuyen: phiVanChuyen,
      TongTien: tongTien
    });

    // ‚ú® B∆∞·ªõc 3: Th√™m chi ti·∫øt h√≥a ƒë∆°n V·ªöI GI√Å ƒê√É √ÅP D·ª§NG VAT + VOUCHER
    const chiTietHoaDonData = [];
    for (const item of gioHang.chiTiet) {
      // T√≠nh gi√° ƒë√£ √°p d·ª•ng VAT + Voucher cho t·ª´ng s·∫£n ph·∫©m
      const donGiaGoc = parseFloat(item.DonGia);
      const donGiaSauKhuyenMai = donGiaGoc * tyLeApDung;
      const thanhTien = donGiaSauKhuyenMai * item.SoLuong;

      // T·∫°o chi ti·∫øt h√≥a ƒë∆°n v·ªõi gi√° ƒë√£ √°p d·ª•ng khuy·∫øn m√£i
      const chiTiet = await ChiTietHoaDon.create({
        HoaDonID: hoaDon.ID,
        SanPhamID: item.SanPhamID,
        SoLuong: item.SoLuong,
        DonGia: Math.round(donGiaSauKhuyenMai), // ‚Üê Gi√° ƒë√£ √°p d·ª•ng VAT + Voucher
        GiaBan: Math.round(donGiaSauKhuyenMai), // ‚Üê Gi√° ƒë√£ √°p d·ª•ng VAT + Voucher
        ThanhTien: Math.round(thanhTien)
      }, { transaction });

      chiTietHoaDonData.push(chiTiet);

      console.log(`üì¶ S·∫£n ph·∫©m "${item.sanPham.Ten}":`, {
        donGiaGoc: donGiaGoc,
        donGiaSauKhuyenMai: Math.round(donGiaSauKhuyenMai),
        soLuong: item.SoLuong,
        thanhTien: Math.round(thanhTien)
      });

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho
      await SanPham.update(
        { Ton: db.Sequelize.literal(`Ton - ${item.SoLuong}`) },
        {
          where: { ID: item.SanPhamID },
          transaction
        }
      );

      console.log(`üì¶ ƒê√£ th√™m s·∫£n ph·∫©m "${item.sanPham.Ten}" v√†o h√≥a ƒë∆°n v√† c·∫≠p nh·∫≠t t·ªìn kho`);
    }

    // B∆∞·ªõc 4: X√≥a gi·ªè h√†ng sau khi t·∫°o ƒë∆°n th√†nh c√¥ng
    await GioHangChiTiet.destroy({
      where: { GioHangID: gioHang.ID },
      transaction
    });

    console.log('üóëÔ∏è ƒê√£ x√≥a gi·ªè h√†ng');

    // Commit transaction
    await transaction.commit();

    // L·∫•y l·∫°i th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa h√≥a ƒë∆°n v·ª´a t·∫°o
    const hoaDonDetail = await HoaDon.findOne({
      where: { ID: hoaDon.ID },
      include: [
        {
          model: KhachHang,
          as: 'khachHang',
          attributes: ['ID', 'HoTen', 'Email', 'DienThoai', 'DiaChi']
        },
        {
          model: PhuongThucThanhToan,
          as: 'phuongThucThanhToan',
          attributes: ['ID', 'Ten', 'MoTa']
        },
        {
          model: ChiTietHoaDon,
          as: 'chiTiet',
          include: [{
            model: SanPham,
            as: 'sanPham',
            attributes: ['ID', 'Ten', 'HinhAnhURL']
          }]
        }
      ]
    });

    console.log('‚úÖ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng:', hoaDon.MaHD);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(201).json({
      success: true,
      message: 'T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng',
      data: {
        hoaDon: {
          id: hoaDonDetail.ID,
          maHD: hoaDonDetail.MaHD,
          ngayLap: hoaDonDetail.NgayLap,
          tongTien: parseFloat(hoaDonDetail.TongTien),
          trangThai: hoaDonDetail.TrangThai,
          ghiChu: hoaDonDetail.GhiChu,
          khachHang: {
            id: hoaDonDetail.khachHang.ID,
            hoTen: hoaDonDetail.khachHang.HoTen,
            email: hoaDonDetail.khachHang.Email,
            dienThoai: hoaDonDetail.khachHang.DienThoai,
            diaChi: hoaDonDetail.khachHang.DiaChi
          },
          phuongThucThanhToan: {
            id: hoaDonDetail.phuongThucThanhToan.ID,
            ten: hoaDonDetail.phuongThucThanhToan.Ten,
            moTa: hoaDonDetail.phuongThucThanhToan.MoTa
          },
          chiTiet: hoaDonDetail.chiTiet.map(item => ({
            id: item.ID,
            sanPhamId: item.SanPhamID,
            tenSanPham: item.sanPham.Ten,
            hinhAnh: item.sanPham.HinhAnhURL,
            soLuong: item.SoLuong,
            donGia: parseFloat(item.DonGia),
            thanhTien: parseFloat(item.ThanhTien)
          }))
        }
      }
    });

  } catch (error) {
    // Rollback transaction n·∫øu c√≥ l·ªói
    await transaction.rollback();
    
    console.error('‚ùå L·ªói t·∫°o ƒë∆°n h√†ng:', error);

    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    if (error.name === 'SequelizeUniqueConstraintError') {
      return res.status(409).json({
        success: false,
        message: 'M√£ h√≥a ƒë∆°n b·ªã tr√πng, vui l√≤ng th·ª≠ l·∫°i'
      });
    }

    if (error.name === 'SequelizeDatabaseError') {
      return res.status(500).json({
        success: false,
        message: 'L·ªói c∆° s·ªü d·ªØ li·ªáu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Database Error'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô khi t·∫°o ƒë∆°n h√†ng',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

// L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
exports.getMyOrders = async (req, res) => {
  try {
    const taiKhoanId = req.user.id;
    
    // L·∫•y th√¥ng tin t√†i kho·∫£n
    const taiKhoan = await TaiKhoan.findByPk(taiKhoanId);
    
    // T√¨m kh√°ch h√†ng d·ª±a tr√™n email ho·∫∑c t√™n
    const khachHang = await KhachHang.findOne({
      where: {
        [db.Sequelize.Op.or]: [
          { Email: taiKhoan.Email || null },
          { HoTen: taiKhoan.HoTen }
        ]
      }
    });

    if (!khachHang) {
      return res.status(200).json({
        success: true,
        message: 'B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o',
        data: {
          orders: [],
          total: 0
        }
      });
    }

    // L·∫•y danh s√°ch ƒë∆°n h√†ng
    const hoaDons = await HoaDon.findAll({
      where: {
        KhachHangID: khachHang.ID,
        Enable: true
      },
      include: [
        {
          model: PhuongThucThanhToan,
          as: 'phuongThucThanhToan',
          attributes: ['ID', 'Ten']
        },
        {
          model: ChiTietHoaDon,
          as: 'chiTiet',
          include: [{
            model: SanPham,
            as: 'sanPham',
            attributes: ['ID', 'Ten', 'HinhAnhURL']
          }]
        }
      ],
      order: [['NgayLap', 'DESC']]
    });

    const orders = hoaDons.map(hd => ({
      id: hd.ID,
      maHD: hd.MaHD,
      ngayLap: hd.NgayLap,
      tongTien: parseFloat(hd.TongTien),
      trangThai: hd.TrangThai,
      ghiChu: hd.GhiChu,
      phuongThucThanhToan: hd.phuongThucThanhToan.Ten,
      soLuongSanPham: hd.chiTiet.length
    }));

    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng',
      data: {
        orders: orders,
        total: orders.length
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

// L·∫•y chi ti·∫øt ƒë∆°n h√†ng
exports.getOrderDetail = async (req, res) => {
  try {
    const orderId = parseInt(req.params.id);
    const taiKhoanId = req.user.id;

    if (!orderId || orderId < 1) {
      return res.status(400).json({
        success: false,
        message: 'ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá'
      });
    }

    // L·∫•y th√¥ng tin t√†i kho·∫£n
    const taiKhoan = await TaiKhoan.findByPk(taiKhoanId);

    // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
    const hoaDon = await HoaDon.findOne({
      where: {
        ID: orderId,
        Enable: true
      },
      include: [
        {
          model: KhachHang,
          as: 'khachHang',
          attributes: ['ID', 'HoTen', 'Email', 'DienThoai', 'DiaChi']
        },
        {
          model: PhuongThucThanhToan,
          as: 'phuongThucThanhToan',
          attributes: ['ID', 'Ten', 'MoTa']
        },
        {
          model: ChiTietHoaDon,
          as: 'chiTiet',
          include: [{
            model: SanPham,
            as: 'sanPham',
            attributes: ['ID', 'Ten', 'HinhAnhURL', 'GiaBan']
          }]
        }
      ]
    });

    if (!hoaDon) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    // Ki·ªÉm tra quy·ªÅn xem ƒë∆°n h√†ng (ch·ªâ user t·∫°o ƒë∆°n ho·∫∑c admin m·ªõi xem ƒë∆∞·ª£c)
    const isOwner = hoaDon.khachHang.Email === taiKhoan.Email || 
                    hoaDon.khachHang.HoTen === taiKhoan.HoTen;
    const isAdmin = req.user.role === 'admin';

    if (!isOwner && !isAdmin) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y'
      });
    }

    // ‚úÖ ƒê∆†N GI·∫¢N H√ìA - CH·ªà TR·∫¢ V·ªÄ D·ªÆ LI·ªÜU C∆† B·∫¢N
    res.status(200).json({
      success: true,
      message: 'L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng',
      data: {
        hoaDon: {
          id: hoaDon.ID,
          maHD: hoaDon.MaHD,
          ngayLap: hoaDon.NgayLap,
          tongTien: parseFloat(hoaDon.TongTien),
          trangThai: hoaDon.TrangThai,
          ghiChu: hoaDon.GhiChu,
          khachHang: {
            id: hoaDon.khachHang.ID,
            hoTen: hoaDon.khachHang.HoTen,
            email: hoaDon.khachHang.Email,
            dienThoai: hoaDon.khachHang.DienThoai,
            diaChi: hoaDon.khachHang.DiaChi
          },
          phuongThucThanhToan: {
            id: hoaDon.phuongThucThanhToan.ID,
            ten: hoaDon.phuongThucThanhToan.Ten,
            moTa: hoaDon.phuongThucThanhToan.MoTa
          },
          chiTiet: hoaDon.chiTiet.map(item => ({
            id: item.ID,
            sanPhamId: item.SanPhamID,
            tenSanPham: item.sanPham.Ten,
            hinhAnh: item.sanPham.HinhAnhURL,
            soLuong: item.SoLuong,
            donGia: parseFloat(item.DonGia),
            thanhTien: parseFloat(item.ThanhTien)
          }))
        }
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y chi ti·∫øt ƒë∆°n h√†ng:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

// H·ªßy ƒë∆°n h√†ng (ho√†n t·ªìn kho)
exports.cancelOrder = async (req, res) => {
  // B·∫Øt ƒë·∫ßu transaction
  const transaction = await db.sequelize.transaction();
  
  try {
    const orderId = parseInt(req.params.id);
    const taiKhoanId = req.user.id;
    const isAdmin = req.user.role === 'admin';

    console.log('üö´ Y√™u c·∫ßu h·ªßy ƒë∆°n h√†ng - Order ID:', orderId, '- User ID:', taiKhoanId);

    // Validate orderId
    if (!orderId || orderId < 1) {
      await transaction.rollback();
      return res.status(400).json({
        success: false,
        message: 'ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá'
      });
    }

    // L·∫•y th√¥ng tin t√†i kho·∫£n
    const taiKhoan = await TaiKhoan.findByPk(taiKhoanId);

    if (!taiKhoan) {
      await transaction.rollback();
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
      });
    }

    // L·∫•y th√¥ng tin ƒë∆°n h√†ng v·ªõi chi ti·∫øt s·∫£n ph·∫©m
    const hoaDon = await HoaDon.findOne({
      where: {
        ID: orderId,
        Enable: true
      },
      include: [
        {
          model: KhachHang,
          as: 'khachHang',
          attributes: ['ID', 'HoTen', 'Email', 'DienThoai']
        },
        {
          model: ChiTietHoaDon,
          as: 'chiTiet',
          where: { Enable: true },
          required: false,
          include: [{
            model: SanPham,
            as: 'sanPham',
            attributes: ['ID', 'Ten', 'Ton']
          }]
        }
      ],
      transaction
    });

    if (!hoaDon) {
      await transaction.rollback();
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    // Ki·ªÉm tra quy·ªÅn h·ªßy ƒë∆°n (ch·ªâ user t·∫°o ƒë∆°n ho·∫∑c admin m·ªõi h·ªßy ƒë∆∞·ª£c)
    const isOwner = hoaDon.khachHang.Email === taiKhoan.Email || 
                    hoaDon.khachHang.HoTen === taiKhoan.HoTen;

    if (!isOwner && !isAdmin) {
      await transaction.rollback();
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng c√≥ th·ªÉ h·ªßy kh√¥ng
    const allowedCancelStatuses = ['Ch·ªù x·ª≠ l√Ω', 'Ch·ªù thanh to√°n'];
    
    if (!allowedCancelStatuses.includes(hoaDon.TrangThai)) {
      await transaction.rollback();
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "${hoaDon.TrangThai}". Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng "Ch·ªù x·ª≠ l√Ω" ho·∫∑c "Ch·ªù thanh to√°n"`,
        data: {
          currentStatus: hoaDon.TrangThai,
          allowedStatuses: allowedCancelStatuses
        }
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥ ch∆∞a
    if (hoaDon.TrangThai === 'ƒê√£ h·ªßy') {
      await transaction.rollback();
      return res.status(400).json({
        success: false,
        message: 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥'
      });
    }

    console.log(`üì¶ B·∫Øt ƒë·∫ßu ho√†n t·ªìn kho cho ${hoaDon.chiTiet.length} s·∫£n ph·∫©m`);

    // Ho√†n t·ªìn kho cho t·ª´ng s·∫£n ph·∫©m
    const restoredProducts = [];
    for (const item of hoaDon.chiTiet) {
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho (c·ªông l·∫°i s·ªë l∆∞·ª£ng ƒë√£ mua)
      const [affectedRows] = await SanPham.update(
        { Ton: db.Sequelize.literal(`Ton + ${item.SoLuong}`) },
        {
          where: { ID: item.SanPhamID },
          transaction
        }
      );

      if (affectedRows > 0) {
        // L·∫•y l·∫°i th√¥ng tin s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
        const updatedProduct = await SanPham.findByPk(item.SanPhamID, {
          attributes: ['ID', 'Ten', 'Ton'],
          transaction
        });

        restoredProducts.push({
          sanPhamId: item.SanPhamID,
          tenSanPham: item.sanPham.Ten,
          soLuongHoan: item.SoLuong,
          tonKhoMoi: updatedProduct.Ton
        });

        console.log(`‚úÖ Ho√†n ${item.SoLuong} s·∫£n ph·∫©m "${item.sanPham.Ten}" - T·ªìn kho m·ªõi: ${updatedProduct.Ton}`);
      }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const cancelNote = `ƒê∆°n h√†ng ƒë√£ h·ªßy b·ªüi ${isAdmin ? 'Admin' : 'Kh√°ch h√†ng'} l√∫c ${new Date().toLocaleString('vi-VN')}`;
    
    await hoaDon.update({
      TrangThai: 'ƒê√£ h·ªßy',
      GhiChu: hoaDon.GhiChu ? `${hoaDon.GhiChu} | ${cancelNote}` : cancelNote
    }, { transaction });

    // Commit transaction
    await transaction.commit();

    console.log(`‚úÖ H·ªßy ƒë∆°n h√†ng ${hoaDon.MaHD} th√†nh c√¥ng`);

    res.status(200).json({
      success: true,
      message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng',
      data: {
        hoaDon: {
          id: hoaDon.ID,
          maHD: hoaDon.MaHD,
          trangThai: 'ƒê√£ h·ªßy',
          tongTien: parseFloat(hoaDon.TongTien),
          ngayLap: hoaDon.NgayLap
        },
        restoredProducts: restoredProducts,
        totalProductsRestored: restoredProducts.length,
        totalQuantityRestored: restoredProducts.reduce((sum, p) => sum + p.soLuongHoan, 0)
      }
    });

  } catch (error) {
    // Rollback transaction n·∫øu c√≥ l·ªói
    await transaction.rollback();
    
    console.error('‚ùå L·ªói h·ªßy ƒë∆°n h√†ng:', error);

    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    if (error.name === 'SequelizeDatabaseError') {
      return res.status(500).json({
        success: false,
        message: 'L·ªói c∆° s·ªü d·ªØ li·ªáu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Database Error'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô khi h·ªßy ƒë∆°n h√†ng',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

// L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng chi ti·∫øt
exports.getOrderHistory = async (req, res) => {
  try {
    console.log('üìú L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng - User ID:', req.user.id);
     console.log('üìú Query params:', req.query);

    const taiKhoanId = req.user.id;
    
    // L·∫•y query parameters
    const pageParam = req.query.page;
    const limitParam = req.query.limit;
    const trangThai = req.query.trangThai || null;

    // Validate v√† parse page parameter
    let page = 1; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    if (pageParam !== undefined) {
      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† s·ªë kh√¥ng (string s·ªë ho·∫∑c number)
      if (!/^\d+$/.test(String(pageParam))) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë trang ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng l·ªõn h∆°n 0'
        });
      }
      
      page = parseInt(pageParam);
      
      // Ki·ªÉm tra page ph·∫£i > 0
      if (page < 1) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë trang ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng l·ªõn h∆°n 0'
        });
      }
    }

    // Validate v√† parse limit parameter
    let limit = 10; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    if (limitParam !== undefined) {
      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† s·ªë kh√¥ng
      if (!/^\d+$/.test(String(limitParam))) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë l∆∞·ª£ng ƒë∆°n h√†ng m·ªói trang ph·∫£i t·ª´ 1 ƒë·∫øn 50'
        });
      }
      
      limit = parseInt(limitParam);
      
      // Ki·ªÉm tra limit trong kho·∫£ng h·ª£p l·ªá
      if (limit < 1 || limit > 50) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë l∆∞·ª£ng ƒë∆°n h√†ng m·ªói trang ph·∫£i t·ª´ 1 ƒë·∫øn 50'
        });
      }
    }

    // T√≠nh offset SAU KHI ƒë√£ validate
    const offset = (page - 1) * limit;

    console.log(`‚úÖ Validated params - Page: ${page}, Limit: ${limit}, Offset: ${offset}`);

    // L·∫•y th√¥ng tin t√†i kho·∫£n
    const taiKhoan = await TaiKhoan.findByPk(taiKhoanId);
    
    if (!taiKhoan) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
      });
    }

    // T√¨m kh√°ch h√†ng d·ª±a tr√™n email ho·∫∑c t√™n
    const khachHang = await KhachHang.findOne({
      where: {
        [db.Sequelize.Op.or]: [
          { Email: taiKhoan.Email || null },
          { HoTen: taiKhoan.HoTen }
        ]
      }
    });

    // N·∫øu kh√¥ng t√¨m th·∫•y kh√°ch h√†ng, tr·∫£ v·ªÅ danh s√°ch r·ªóng
    if (!khachHang) {
      return res.status(200).json({
        success: true,
        message: 'B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o',
        data: {
          orders: [],
          pagination: {
            currentPage: page,
            totalPages: 0,
            totalOrders: 0,
            ordersPerPage: limit,
            hasNextPage: false,
            hasPrevPage: false
          }
        }
      });
    }

    // T·∫°o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    const whereCondition = {
      KhachHangID: khachHang.ID,
      Enable: true
    };

    // Th√™m ƒëi·ªÅu ki·ªán l·ªçc theo tr·∫°ng th√°i n·∫øu c√≥
    if (trangThai) {
      whereCondition.TrangThai = trangThai;
    }

    console.log('üîç ƒêi·ªÅu ki·ªán t√¨m ki·∫øm:', whereCondition);

    // L·∫•y danh s√°ch ƒë∆°n h√†ng v·ªõi ph√¢n trang
    const { count, rows } = await HoaDon.findAndCountAll({
      where: whereCondition,
      include: [
        {
          model: KhachHang,
          as: 'khachHang',
          attributes: ['ID', 'HoTen', 'Email', 'DienThoai', 'DiaChi']
        },
        {
          model: PhuongThucThanhToan,
          as: 'phuongThucThanhToan',
          attributes: ['ID', 'Ten', 'MoTa']
        },
        {
          model: ChiTietHoaDon,
          as: 'chiTiet',
          where: { Enable: true },
          required: false, // LEFT JOIN ƒë·ªÉ l·∫•y c·∫£ ƒë∆°n h√†ng kh√¥ng c√≥ chi ti·∫øt
          include: [{
            model: SanPham,
            as: 'sanPham',
            attributes: ['ID', 'Ten', 'HinhAnhURL', 'GiaBan', 'LoaiID']
          }]
        }
      ],
      limit: limit,
      offset: offset,
      order: [['NgayLap', 'DESC']], // S·∫Øp x·∫øp t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
      distinct: true // ƒê·∫£m b·∫£o count ch√≠nh x√°c khi c√≥ JOIN
    });

    // T√≠nh to√°n th√¥ng tin ph√¢n trang
    const totalOrders = count;
    const totalPages = Math.ceil(totalOrders / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;

    // Format d·ªØ li·ªáu tr·∫£ v·ªÅ
    const orders = rows.map(hoaDon => {
      // T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
      const tongSoLuongSanPham = hoaDon.chiTiet.reduce((sum, item) => sum + item.SoLuong, 0);

      return {
        id: hoaDon.ID,
        maHD: hoaDon.MaHD,
        ngayLap: hoaDon.NgayLap,
        trangThai: hoaDon.TrangThai,
        tongTien: parseFloat(hoaDon.TongTien),
        ghiChu: hoaDon.GhiChu,
        khachHang: {
          id: hoaDon.khachHang.ID,
          hoTen: hoaDon.khachHang.HoTen,
          email: hoaDon.khachHang.Email,
          dienThoai: hoaDon.khachHang.DienThoai,
          diaChi: hoaDon.khachHang.DiaChi
        },
        phuongThucThanhToan: {
          id: hoaDon.phuongThucThanhToan.ID,
          ten: hoaDon.phuongThucThanhToan.Ten,
          moTa: hoaDon.phuongThucThanhToan.MoTa
        },
        sanPhams: hoaDon.chiTiet.map(item => ({
          id: item.ID,
          sanPhamId: item.SanPhamID,
          tenSanPham: item.sanPham.Ten,
          hinhAnh: item.sanPham.HinhAnhURL,
          soLuong: item.SoLuong,
          donGia: parseFloat(item.DonGia),
          thanhTien: parseFloat(item.ThanhTien),
          giaBanHienTai: parseFloat(item.sanPham.GiaBan) // Gi√° hi·ªán t·∫°i c·ªßa s·∫£n ph·∫©m (c√≥ th·ªÉ kh√°c gi√° l√∫c mua)
        })),
        tongSoLuongSanPham: tongSoLuongSanPham,
        soLoaiSanPham: hoaDon.chiTiet.length
      };
    });

    console.log(`‚úÖ L·∫•y ${orders.length}/${totalOrders} ƒë∆°n h√†ng th√†nh c√¥ng`);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      success: true,
      message: 'L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng th√†nh c√¥ng',
      data: {
        orders: orders,
        pagination: {
          currentPage: page,
          totalPages: totalPages,
          totalOrders: totalOrders,
          ordersPerPage: limit,
          hasNextPage: hasNextPage,
          hasPrevPage: hasPrevPage
        },
        filter: {
          trangThai: trangThai || 'T·∫•t c·∫£'
        },
        summary: {
          tongTienTatCaDonHang: orders.reduce((sum, order) => sum + order.tongTien, 0),
          tongSoSanPhamDaMua: orders.reduce((sum, order) => sum + order.tongSoLuongSanPham, 0)
        }
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng:', error);

    // X·ª≠ l√Ω l·ªói c∆° s·ªü d·ªØ li·ªáu
    if (error.name === 'SequelizeDatabaseError') {
      return res.status(500).json({
        success: false,
        message: 'L·ªói c∆° s·ªü d·ªØ li·ªáu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Database Error'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

