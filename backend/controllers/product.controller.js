const db = require('../models');
const { Op } = require('sequelize');
const SanPham = db.SanPham;
const LoaiSP = db.LoaiSP;
const ChiTietHoaDon = db.ChiTietHoaDon;

// üéØ Import Strategy Pattern
const FilterContext = require('../strategies/FilterContext');

// L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi ph√¢n trang v√† t√¨m ki·∫øm
exports.getAllProducts = async (req, res) => {
  try {
    console.log('üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m - Query params:', req.query);

    // L·∫•y parameters t·ª´ query string
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const search = req.query.search || '';
    
    // üéØ STRATEGY PATTERN: L·∫•y filterType t·ª´ query
    const filterType = req.query.filter || 'newest'; // M·∫∑c ƒë·ªãnh l√† 'newest'
    
    // L·∫•y c√°c tham s·ªë l·ªçc kh√°c
    const minPrice = req.query.minPrice ? parseFloat(req.query.minPrice) : null;
    const maxPrice = req.query.maxPrice ? parseFloat(req.query.maxPrice) : null;
    const categoryId = req.query.categoryId ? parseInt(req.query.categoryId) : null;
    
    const offset = (page - 1) * limit;

    // Validate parameters
    if (page < 1) {
      return res.status(400).json({
        success: false,
        message: 'S·ªë trang ph·∫£i l·ªõn h∆°n 0'
      });
    }

    if (limit < 1 || limit > 100) {
      return res.status(400).json({
        success: false,
        message: 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói trang ph·∫£i t·ª´ 1 ƒë·∫øn 100'
      });
    }

    // T·∫°o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    const whereCondition = {
      Enable: true
    };

    // Th√™m ƒëi·ªÅu ki·ªán t√¨m ki·∫øm theo t√™n n·∫øu c√≥
    if (search.trim()) {
      whereCondition.Ten = {
        [Op.like]: `%${search.trim()}%`
      };
    }

    console.log('üîç ƒêi·ªÅu ki·ªán t√¨m ki·∫øm:', whereCondition);
    console.log('üéØ Filter type:', filterType);

    // Truy v·∫•n database - L·∫•y T·∫§T C·∫¢ s·∫£n ph·∫©m tr∆∞·ªõc khi apply strategy
    // N·∫øu d√πng bestSeller strategy, c·∫ßn include ChiTietHoaDon
    const includeOptions = [
      {
        model: LoaiSP,
        as: 'loaiSP',
        attributes: ['ID', 'Ten', 'MoTa'],
        where: { Enable: true }
      }
    ];

    // N·∫øu filter l√† bestSeller, th√™m include ChiTietHoaDon
    if (filterType === 'bestSeller') {
      includeOptions.push({
        model: ChiTietHoaDon,
        as: 'chiTietHoaDons', // ‚úÖ S·ª≠a t·ª´ 'ChiTietHoaDons' th√†nh 'chiTietHoaDons'
        attributes: ['SoLuong'],
        required: false // LEFT JOIN ƒë·ªÉ l·∫•y c·∫£ s·∫£n ph·∫©m ch∆∞a b√°n
      });
    }

    const { count, rows } = await SanPham.findAndCountAll({
      where: whereCondition,
      include: includeOptions,
      attributes: [
        'ID', 
        'Ten',
        'MoTa', 
        'GiaBan', 
        'Ton',
        'HinhAnhURL',
        'LoaiID',
        'NgayTao',
        'Enable'
      ],
      distinct: true
    });

    console.log(`üìä T√¨m th·∫•y ${count} s·∫£n ph·∫©m tr∆∞·ªõc khi √°p d·ª•ng strategy`);

    // üéØ STRATEGY PATTERN: √Åp d·ª•ng strategy ƒë·ªÉ l·ªçc v√† s·∫Øp x·∫øp
    const queryParams = {
      minPrice,
      maxPrice,
      categoryId
    };

    // Chuy·ªÉn ƒë·ªïi Sequelize models sang plain objects
    const plainProducts = rows.map(p => p.toJSON());

    // √Åp d·ª•ng strategy
    const filteredProducts = FilterContext.applyFilter(
      plainProducts,
      filterType,
      queryParams
    );

    console.log(`‚úÖ Sau khi √°p d·ª•ng strategy '${filterType}': ${filteredProducts.length} s·∫£n ph·∫©m`);

    // √Åp d·ª•ng ph√¢n trang SAU KHI ƒë√£ l·ªçc
    const totalProducts = filteredProducts.length;
    const paginatedProducts = filteredProducts.slice(offset, offset + limit);

    // T√≠nh to√°n th√¥ng tin ph√¢n trang
    const totalPages = Math.ceil(totalProducts / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;

    // L·∫•y base URL t·ª´ request
    const baseUrl = `${req.protocol}://${req.get('host')}`;

    // Format d·ªØ li·ªáu tr·∫£ v·ªÅ theo c·∫•u tr√∫c chu·∫©n - CHU·∫®N H√ìA THEO DATABASE
    const products = paginatedProducts.map(product => ({
      ID: product.ID,
      Ten: product.Ten,
      MoTa: product.MoTa,
      GiaBan: parseFloat(product.GiaBan),
      Ton: product.Ton,
      HinhAnhURL: product.HinhAnhURL ? `${baseUrl}${product.HinhAnhURL}` : null,
      LoaiID: product.LoaiID,
      NgayTao: product.NgayTao,
      Enable: product.Enable,
      // Th√™m totalSold n·∫øu l√† bestSeller strategy
      ...(product.totalSold !== undefined && { SoLuongBan: product.totalSold }),
      LoaiSP: product.loaiSP ? {
        ID: product.loaiSP.ID,
        Ten: product.loaiSP.Ten,
        MoTa: product.loaiSP.MoTa
      } : null
    }));

    console.log(`‚úÖ L·∫•y ${products.length}/${totalProducts} s·∫£n ph·∫©m th√†nh c√¥ng`);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo format chu·∫©n
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng',
      data: {
        products: products,
        pagination: {
          currentPage: page,
          totalPages: totalPages,
          totalProducts: totalProducts,
          productsPerPage: limit,
          hasNextPage: hasNextPage,
          hasPrevPage: hasPrevPage
        },
        filters: {
          filterType: filterType,
          search: search.trim() || null,
          minPrice: minPrice,
          maxPrice: maxPrice,
          categoryId: categoryId,
          availableFilters: FilterContext.getAvailableFilters()
        }
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m:', error);

    // In chi ti·∫øt SQL query ƒë·ªÉ debug
    if (error.sql) {
      console.error('üìù SQL Query g√¢y l·ªói:', error.sql);
    }

    // X·ª≠ l√Ω l·ªói SQL c·ª• th·ªÉ
    if (error.name === 'SequelizeDatabaseError') {
      return res.status(500).json({
        success: false,
        message: 'L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Database Error'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};

// L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
exports.getProductById = async (req, res) => {
  try {
    console.log('üîç L·∫•y chi ti·∫øt s·∫£n ph·∫©m - ID:', req.params.id);

    const productId = parseInt(req.params.id);

    // Validate ID parameter
    if (!productId || productId < 1) {
      return res.status(400).json({
        success: false,
        message: 'ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá'
      });
    }

    // Truy v·∫•n s·∫£n ph·∫©m theo ID v·ªõi JOIN b·∫£ng LoaiSP
    const product = await SanPham.findOne({
      where: {
        ID: productId,
        Enable: true
      },
      include: [
        {
          model: LoaiSP,
          as: 'loaiSP',
          attributes: ['ID', 'Ten', 'MoTa'],
          where: {
            Enable: true
          }
        }
      ],
      attributes: [
        'ID',
        'Ten',
        'MoTa',
        'GiaBan',
        'Ton',
        'HinhAnhURL',
        'LoaiID',
        'NgayTao',
        'Enable'
      ]
    });

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    if (!product) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c s·∫£n ph·∫©m ƒë√£ ng·ª´ng kinh doanh'
      });
    }

    console.log('‚úÖ T√¨m th·∫•y s·∫£n ph·∫©m:', product.Ten);

    // L·∫•y base URL t·ª´ request
    const baseUrl = `${req.protocol}://${req.get('host')}`;

    // Format d·ªØ li·ªáu tr·∫£ v·ªÅ v·ªõi URL ƒë·∫ßy ƒë·ªß - CHU·∫®N H√ìA THEO DATABASE
    const productDetail = {
      ID: product.ID,
      Ten: product.Ten,
      MoTa: product.MoTa,
      // Th√™m base URL v√†o ƒë∆∞·ªùng d·∫´n ·∫£nh
      HinhAnhURL: product.HinhAnhURL ? `${baseUrl}${product.HinhAnhURL}` : null,
      GiaBan: parseFloat(product.GiaBan),
      Ton: product.Ton,
      LoaiID: product.LoaiID,
      NgayTao: product.NgayTao,
      Enable: product.Enable,
      LoaiSP: product.loaiSP ? {
        ID: product.loaiSP.ID,
        Ten: product.loaiSP.Ten,
        MoTa: product.loaiSP.MoTa
      } : null
    };

    console.log('‚úÖ L·∫•y chi ti·∫øt s·∫£n ph·∫©m th√†nh c√¥ng:', productDetail.Ten);

    // Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
    res.status(200).json({
      success: true,
      message: 'L·∫•y chi ti·∫øt s·∫£n ph·∫©m th√†nh c√¥ng',
      data: {
        product: productDetail
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', error);

    if (error.sql) {
      console.error('üìù SQL Query g√¢y l·ªói:', error.sql);
    }

    if (error.name === 'SequelizeDatabaseError') {
      return res.status(500).json({
        success: false,
        message: 'L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Database Error'
      });
    }

    if (error.name === 'SequelizeValidationError') {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Validation Error'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server n·ªôi b·ªô',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
};